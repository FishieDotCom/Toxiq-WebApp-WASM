@* Toxiq.WebApp.Client/Components/VoteButtons.razor *@
@using Toxiq.WebApp.Client.Services.Api
@using Toxiq.WebApp.Client.Services.Feed
@inject IApiService ApiService
@inject IFeedService FeedService
@inject ILogger<VoteButtons> Logger
@implements IDisposable

<div class="vote-buttons" style="@GetContainerStyle()">
    <!-- Upvote Button -->
    <button @onclick="HandleUpvote"
            @onclick:stopPropagation="true"
            disabled="@IsProcessingVote"
            class="vote-btn upvote-btn @GetUpvoteButtonClass()"
            style="@GetUpvoteButtonStyle()">
        <div class="vote-icon">
            @if (CurrentSupportStatus == true)
            {
                <!-- Filled upvote icon (active state) -->
                <svg width="17.75" height="17.75" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M15.057 9.004c.46-1.427.693-2.676.693-3.753 0-2.399-.939-4.248-2.5-4.248-.847 0-1.109.505-1.437 1.747.017-.065-.163.634-.215.821-.101.36-.277.97-.527 1.831a.247.247 0 0 1-.03.065L8.175 9.953A5.885 5.885 0 0 1 5.32 12.28l-1.257.481a1.75 1.75 0 0 0-1.092 1.968l.686 3.538a2.25 2.25 0 0 0 1.673 1.757l8.25 2.022a4.75 4.75 0 0 0 5.733-3.44l1.574-6.173a2.75 2.75 0 0 0-2.665-3.429h-3.165Z" fill="currentColor" /></svg>

            }
            else
            {
                <!-- Outline upvote icon (inactive state) -->
                <svg width="17.75" height="17.75" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M16.5 5.202c0-2.442-1.14-4.199-3.007-4.199-1.026 0-1.378.602-1.746 2-.075.289-.112.43-.151.568-.101.359-.277.97-.527 1.831a.25.25 0 0 1-.03.065L8.174 9.953a5.885 5.885 0 0 1-2.855 2.326l-.473.181a2.75 2.75 0 0 0-1.716 3.092l.404 2.086a3.25 3.25 0 0 0 2.417 2.538l7.628 1.87a4.75 4.75 0 0 0 5.733-3.44l1.415-5.55a3.25 3.25 0 0 0-3.15-4.052h-1.822c.496-1.633.746-2.893.746-3.802ZM4.6 15.267a1.25 1.25 0 0 1 .78-1.406l.474-.18a7.385 7.385 0 0 0 3.582-2.92l2.867-4.486c.09-.141.159-.294.205-.455.252-.865.428-1.479.53-1.843.044-.153.085-.308.159-.592.19-.722.283-.882.295-.882.868 0 1.507.984 1.507 2.7 0 .884-.326 2.335-.984 4.314a.75.75 0 0 0 .711.987h2.85a1.751 1.751 0 0 1 1.696 2.182l-1.415 5.55a3.25 3.25 0 0 1-3.923 2.353l-7.628-1.87a1.75 1.75 0 0 1-1.301-1.366L4.6 15.267Z" fill="currentColor" /></svg>

            }
        </div>
        @if (ShowCount && (CurrentSupportCount > 0 || CurrentSupportStatus == true))
        {
            <span class="vote-count">@GetSupportCountDisplay()</span>
        }
    </button>

    <!-- Downvote Button -->
    <button @onclick="HandleDownvote"
            @onclick:stopPropagation="true"
            disabled="@IsProcessingVote"
            class="vote-btn downvote-btn @GetDownvoteButtonClass()"
            style="@GetDownvoteButtonStyle()">
        <div class="vote-icon">
            @if (CurrentSupportStatus == false)
            {
                <!-- Filled downvote icon (active state) -->
                <svg width="17.75" height="17.75" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16.5 17.985c0 2.442-1.14 4.198-3.007 4.198-.975 0-1.341-.542-1.69-1.795l-.207-.772c-.101-.359-.277-.97-.527-1.831a.249.249 0 0 0-.03-.065l-2.866-4.486a5.886 5.886 0 0 0-2.855-2.327l-.473-.18A2.75 2.75 0 0 1 3.13 7.634l.404-2.087A3.25 3.25 0 0 1 5.95 3.011l7.628-1.87a4.75 4.75 0 0 1 5.733 3.44l1.415 5.55a3.25 3.25 0 0 1-3.15 4.052h-1.822c.496 1.633.746 2.893.746 3.802Z" fill="currentColor" />
                </svg>
            }
            else
            {
                <!-- Outline downvote icon (inactive state) -->
                <svg width="17.75" height="17.75" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16.5 17.985c0 2.442-1.14 4.198-3.007 4.198-.975 0-1.341-.542-1.69-1.795l-.207-.772c-.101-.359-.277-.97-.527-1.831a.249.249 0 0 0-.03-.065l-2.866-4.486a5.886 5.886 0 0 0-2.855-2.327l-.473-.18A2.75 2.75 0 0 1 3.13 7.634l.404-2.087A3.25 3.25 0 0 1 5.95 3.011l7.628-1.87a4.75 4.75 0 0 1 5.733 3.44l1.415 5.55a3.25 3.25 0 0 1-3.15 4.052h-1.822c.496 1.633.746 2.893.746 3.802ZM4.6 7.92a1.25 1.25 0 0 0 .78 1.405l.474.182a7.385 7.385 0 0 1 3.582 2.92l2.867 4.485c.09.14.159.294.205.454l.552 1.92.212.792c.14.488.21.605.22.605.868 0 1.507-.984 1.507-2.698 0-.885-.326-2.336-.984-4.315a.75.75 0 0 1 .711-.987h2.85a1.751 1.751 0 0 0 1.696-2.182l-1.415-5.55a3.25 3.25 0 0 0-3.923-2.353l-7.628 1.87a1.75 1.75 0 0 0-1.301 1.366L4.6 7.92Z" fill="currentColor" />
                </svg>
            }
        </div>
    </button>
</div>

@code {
    [Parameter] public Guid ContentId { get; set; }
    [Parameter] public string ContentType { get; set; } = "post"; // "post", "comment", "reply"
    [Parameter] public bool? InitialSupportStatus { get; set; }
    [Parameter] public int? InitialSupportCount { get; set; }
    [Parameter] public bool ShowCount { get; set; } = true;
    [Parameter] public string Variant { get; set; } = "default"; // "default", "compact"
    [Parameter] public EventCallback<VoteChangedEventArgs> OnVoteChanged { get; set; }

    private bool? CurrentSupportStatus { get; set; }
    private int? CurrentSupportCount { get; set; }
    private bool IsProcessingVote { get; set; } = false;

    protected override void OnInitialized()
    {
        CurrentSupportStatus = InitialSupportStatus;
        CurrentSupportCount = InitialSupportCount;

        // Subscribe to feed service events for real-time updates (posts only)
        if (ContentType == "post")
        {
            FeedService.PostInteractionChanged += OnPostInteractionChanged;
        }
    }

    protected override void OnParametersSet()
    {
        // Update current state when parameters change
        CurrentSupportStatus = InitialSupportStatus;
        CurrentSupportCount = InitialSupportCount;
    }

    public void Dispose()
    {
        if (ContentType == "post")
        {
            FeedService.PostInteractionChanged -= OnPostInteractionChanged;
        }
    }

    private void OnPostInteractionChanged(object? sender, PostInteractionEventArgs e)
    {
        if (e.PostId == ContentId)
        {
            CurrentSupportStatus = e.NewSupportStatus;
            if (e.NewSupportCount.HasValue)
            {
                CurrentSupportCount = e.NewSupportCount.Value;
            }
            StateHasChanged();
        }
    }

    private async Task HandleUpvote()
    {
        if (IsProcessingVote) return;

        IsProcessingVote = true;
        try
        {
            bool success;
            var previousStatus = CurrentSupportStatus;
            var previousCount = CurrentSupportCount ?? 0;

            // Toggle logic matching mobile app behavior
            if (CurrentSupportStatus == true)
            {
                // Remove vote if already upvoted (mobile app uses Deletevote)
                success = await RemoveVote();
                if (success)
                {
                    CurrentSupportStatus = null;
                    CurrentSupportCount = Math.Max(0, previousCount - 1);
                }
            }
            else
            {
                // Upvote the content
                success = await Upvote();
                if (success)
                {
                    // Adjust count based on previous state (mobile app pattern)
                    var countAdjustment = previousStatus == false ? 2 : 1;
                    CurrentSupportStatus = true;
                    CurrentSupportCount = previousCount + countAdjustment;
                }
            }

            if (success)
            {
                StateHasChanged();
                await NotifyVoteChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling upvote for {ContentType} {ContentId}", ContentType, ContentId);
        }
        finally
        {
            IsProcessingVote = false;
        }
    }

    private async Task HandleDownvote()
    {
        if (IsProcessingVote) return;

        IsProcessingVote = true;
        try
        {
            bool success;
            var previousStatus = CurrentSupportStatus;
            var previousCount = CurrentSupportCount ?? 0;

            // Toggle logic matching mobile app behavior
            if (CurrentSupportStatus == false)
            {
                // Remove vote if already downvoted (mobile app uses Deletevote)
                success = await RemoveVote();
                if (success)
                {
                    CurrentSupportStatus = null;
                    CurrentSupportCount = previousCount + 1;
                }
            }
            else
            {
                // Downvote the content
                success = await Downvote();
                if (success)
                {
                    // Adjust count based on previous state (mobile app pattern)
                    var countAdjustment = previousStatus == true ? 2 : 1;
                    CurrentSupportStatus = false;
                    CurrentSupportCount = Math.Max(0, previousCount - countAdjustment);
                }
            }

            if (success)
            {
                StateHasChanged();
                await NotifyVoteChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling downvote for {ContentType} {ContentId}", ContentType, ContentId);
        }
        finally
        {
            IsProcessingVote = false;
        }
    }

    private async Task<bool> Upvote()
    {
        return ContentType.ToLower() switch
        {
            "post" => await FeedService.UpvotePostAsync(ContentId),
            "comment" => await ApiService.CommentService.UpvoteComment(ContentId),
            "reply" => await ApiService.CommentService.UpvoteComment(ContentId), // Replies use comment endpoints
            _ => throw new ArgumentException($"Unknown content type: {ContentType}")
        };
    }

    private async Task<bool> Downvote()
    {
        return ContentType.ToLower() switch
        {
            "post" => await FeedService.DownvotePostAsync(ContentId),
            "comment" => await ApiService.CommentService.DownvoteComment(ContentId),
            "reply" => await ApiService.CommentService.DownvoteComment(ContentId), // Replies use comment endpoints
            _ => throw new ArgumentException($"Unknown content type: {ContentType}")
        };
    }

    private async Task<bool> RemoveVote()
    {
        return ContentType.ToLower() switch
        {
            "post" => await FeedService.RemoveVoteAsync(ContentId),
            "comment" => await ApiService.CommentService.RemoveCommentVote(ContentId),
            "reply" => await ApiService.CommentService.RemoveCommentVote(ContentId), // Replies use comment endpoints
            _ => throw new ArgumentException($"Unknown content type: {ContentType}")
        };
    }

    private async Task NotifyVoteChanged()
    {
        if (OnVoteChanged.HasDelegate)
        {
            var args = new VoteChangedEventArgs
                {
                    ContentId = ContentId,
                    ContentType = ContentType,
                    NewSupportStatus = CurrentSupportStatus,
                    NewSupportCount = CurrentSupportCount
                };
            await OnVoteChanged.InvokeAsync(args);
        }
    }

    private string GetContainerStyle()
    {
        return Variant switch
        {
            "compact" => "display: flex; align-items: center; gap: 4px;",
            "twitter-style" => "display: flex; align-items: center; gap: 0;",
            _ => "display: flex; align-items: center; gap: 0;"
        };
    }

    private string GetUpvoteButtonStyle()
    {
        if (Variant == "twitter-style")
        {
            return @"background: none;
                    border: none;
                    color: var(--gray-500);
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    gap: 6px;
                    padding: 8px;
                    border-radius: 20px;
                    transition: all 0.2s ease;
                    font-size: 13px;
                    font-weight: 400;
                    min-width: 0;";
        }

        return @"display: flex;
                align-items: center;
                justify-content: center;
                background-color: rgba(255, 255, 255, 0.1);
                border: none;
                padding: 8px 12px;
                cursor: pointer;
                color: white;
                transition: all 0.2s ease;
                border-bottom-left-radius: 14px;
                border-top-left-radius: 15px;
                border-top-right-radius: 0;
                border-bottom-right-radius: 0;
                gap: 6px;";
    }

    private string GetDownvoteButtonStyle()
    {
        if (Variant == "twitter-style")
        {
            return @"background: none;
                    border: none;
                    color: var(--gray-500);
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    gap: 6px;
                    padding: 8px;
                    border-radius: 20px;
                    transition: all 0.2s ease;
                    font-size: 13px;
                    font-weight: 400;
                    min-width: 0;";
        }

        return @"display: flex;
                align-items: center;
                justify-content: center;
                background-color: rgba(255, 255, 255, 0.1);
                border: none;
                padding: 8px 12px;
                cursor: pointer;
                color: white;
                transition: all 0.2s ease;
                border-top-right-radius: 15px;
                border-bottom-right-radius: 15px;
                border-top-left-radius: 0;
                border-bottom-left-radius: 0;
                gap: 6px;";
    }
    private string GetUpvoteButtonClass()
    {
        var baseClass = "upvote-btn";
        if (CurrentSupportStatus == true)
        {
            baseClass += " active-up";
        }
        if (IsProcessingVote)
        {
            baseClass += " processing";
        }
        return baseClass;
    }

    private string GetDownvoteButtonClass()
    {
        var baseClass = "downvote-btn";
        if (CurrentSupportStatus == false)
        {
            baseClass += " active-down";
        }
        if (IsProcessingVote)
        {
            baseClass += " processing";
        }
        return baseClass;
    }

    private int GetSupportCountDisplay()
    {
        return Math.Max(0, CurrentSupportCount ?? 0);
    }
}

<style>
    .vote-buttons {
        flex: 0 0 auto;
    }

    .vote-btn {
        min-width: 44px;
        height: 33px;
        border: none;
        font-weight: 600;
        font-size: 14px;
    }

        .vote-btn:hover:not(:disabled) {
            background-color: rgba(255, 255, 255, 0.2) !important;
        }

        .vote-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .vote-btn.processing {
            pointer-events: none;
        }

    .vote-icon {
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .vote-icon svg {
            width: 18px;
            height: 18px;
            fill: currentColor;
        }

    .vote-count {
        font-size: 12px;
        font-weight: 600;
        min-width: 16px;
        text-align: center;
    }

    /* Active states matching mobile app styling */
    .vote-btn.active-up {
        background-color: rgba(34, 197, 94, 0.3) !important;
        color: #22c55e !important;
    }

    .vote-btn.active-down {
        background-color: rgba(239, 68, 68, 0.3) !important;
        color: #ef4444 !important;
    }

    /* Responsive scaling for mobile */
    @@media (max-width: 768px) {
        .vote-btn

    {
        min-width: 40px;
        height: 36px;
        padding: 6px 10px;
    }

    .vote-icon svg {
        width: 16px;
        height: 16px;
    }

    .vote-count {
        font-size: 11px;
    }

    }
</style>

@* Event args class for vote change notifications *@
@code {
    public class VoteChangedEventArgs
    {
        public Guid ContentId { get; set; }
        public string ContentType { get; set; } = "";
        public bool? NewSupportStatus { get; set; }
        public int? NewSupportCount { get; set; }
    }
}