
@using Microsoft.FluentUI.AspNetCore.Components
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Components.Core
@using Toxiq.WebApp.Client.Services.Feed
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IFeedService FeedService
@implements IDisposable

<div class="post-card @GetPostTypeClass()" @onclick="HandlePostClick">
    <div class="post-content">
        <!-- Header - Twitter-like with author info and timestamp -->
        <div class="post-header">
            <div class="post-author" @onclick="HandleProfileClick" @onclick:stopPropagation="true">
                <span class="author-name">@Post.Name</span>
                <span class="author-username">@@@Post.UserName</span>
                @*  <span class="post-timestamp">·</span>
                <span class="post-timestamp">@GetTimeAgo()</span> *@
            </div>
            <div class="post-header-actions">
                @if (Post.Type == PostType.Burn)
                {
                    <div class="burn-indicator" title="Burn Post">🔥</div>
                }
                <!-- Post Options Menu Button -->
                @*  <button class="post-options-btn" @onclick="HandleOptionsClick" @onclick:stopPropagation="true">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.MoreHorizontal().WithColor("#6E6E6E"))" />
                </button> *@
            </div>
        </div>

        <!-- Main Content -->
        <div class="post-text" style="@GetContentStyle()">
            <FormattedText Text="@Post.Content" />
        </div>

        <!-- Media (Images/Video) - Twitter-like media display -->
        @if (Post.PostMedia?.Count > 0)
        {
            <div class="post-media">
                @if (Post.PostMedia.Count == 1)
                {
                    <!-- Single media item -->
                    var media = Post.PostMedia[0];
                    @if (IsImageMedia(media))
                    {
                        <img src="@media.MediaPath"
                        alt="Post attachment"
                        class="post-image single-image"
                        @onclick:stopPropagation="true" />
                    }
                    else if (IsVideoMedia(media))
                    {
                        <video class="post-video" controls>
                            <source src="@media.MediaPath" type="video/mp4">
                            Your browser does not support video playback.
                        </video>
                    }
                }
                else if (Post.PostMedia.Count > 1)
                {
                    <!-- Multiple media items - Twitter-like grid -->
                    <div class="post-media-grid @GetMediaGridClass()">
                        @foreach (var media in Post.PostMedia.Take(4)) // Max 4 media items like Twitter
                        {
                            @if (IsImageMedia(media))
                            {
                                <img src="@media.MediaPath"
                                alt="Post attachment"
                                class="post-image grid-image"
                                @onclick:stopPropagation="true" />
                            }
                        }
                        @if (Post.PostMedia.Count > 4)
                        {
                            <div class="media-count-overlay" @onclick:stopPropagation="true">
                                <span>+@(Post.PostMedia.Count - 4)</span>
                            </div>
                        }
                    </div>
                }
            </div>
        }

        <!-- Reply/Echo Content (if this is a reply) - Twitter-like quoted tweet style -->
        @if(Post.ReplyRefId != null){
            @if (Post.ReplyType != ReplyType.Non)
            {
               @*  <div class="quoted-post" @onclick="HandleQuotedPostClick" @onclick:stopPropagation="true">
                    <ReplyCard Post="@Post"
                    IsFullPost="false"
                    ShowActions="false"/>
                </div> *@
            }
        }


        <!-- Action Buttons Row - Twitter-like layout -->
        <div class="post-actions">


            <!-- Support Buttons (Upvote/Downvote) - Preserve existing VoteButtons component -->
            <VoteButtons ContentId="@Post.Id"
            ContentType="post"
            InitialSupportStatus="@Post.SupportStatus"
            InitialSupportCount="@Post.SupportCount"
            ShowCount="true"
            Variant="twitter-style"
            OnVoteChanged="@HandlePostVoteChanged" />


            <!-- Comment Button -->
            <button class="action-btn comment-btn transparent"
            @onclick="HandleCommentClick"
            @onclick:stopPropagation="true"
            title="Comment">
                <div class="btn-icon">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Comment().WithColor("var(--gray-300)"))" />
                </div>
                <span class="btn-text">@(Post.CommentCount ?? 0)</span>
            </button>

            <!-- More Actions Button -->
            <button class="action-btn share-btn transparent"
            @onclick="HandleShareClick"
            @onclick:stopPropagation="true"
            @ref="shareButtonRef"
            title="Share options">
                <div class="btn-icon">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Share().WithColor("var(--gray-300)"))" />
                </div>
                <span class="btn-text">Share</span>
            </button>
            <ShareContextMenu Post="@Post"
            IsVisible="@isShareMenuVisible"
            OnHide="@HideShareMenu"
            MenuX="@shareMenuX"
            MenuY="@shareMenuY" />
        </div>

        <!-- Post Stats (if FullPost) -->
        @*         @if (FullPost)
        {
            <div class="post-stats-detailed">
                <div class="stats-row">
                    @if (GetSupportCountDisplay() > 0)
                    {
                        <span class="stat-item" @onclick="HandleViewLikes" @onclick:stopPropagation="true">
                            <strong>@GetSupportCountDisplay()</strong> likes
                        </span>
                    }
                    @if ((Post.CommentCount ?? 0) > 0)
                    {
                        <span class="stat-item" @onclick="HandleViewComments" @onclick:stopPropagation="true">
                            <strong>@(Post.CommentCount ?? 0)</strong> comments
                        </span>
                    }
                    @if ((Post.ShareCount ?? 0) > 0)
                    {
                        <span class="stat-item" @onclick="HandleViewShares" @onclick:stopPropagation="true">
                            <strong>@(Post.ShareCount ?? 0)</strong> shares
                        </span>
                    }
                </div>
            </div>
        } *@
    </div>
</div>

@code {
    [Parameter] public BasePost Post { get; set; } = default!;
    [Parameter] public bool FullPost { get; set; } = false;

    private BasePost? ReplyPost { get; set; }
    private bool? CurrentSupportStatus { get; set; }
    private int? CurrentSupportCount { get; set; }
    private bool IsProcessingVote { get; set; } = false;

    private bool isShareMenuVisible = false;
    private string? shareMenuX;
    private string? shareMenuY;
    private ElementReference shareButtonRef;

    protected override async Task OnInitializedAsync()
    {
        // Initialize support status and count (matching mobile app pattern)
        CurrentSupportStatus = Post.SupportStatus;
        CurrentSupportCount = Post.SupportCount;

        // Load reply post if this is a reply (matching mobile app behavior)
        if (Post.ReplyType != ReplyType.Non && Post.ReplyRefId.HasValue)
        {
            try
            {
                // Note: You'll need to implement GetPost in the API service
                // ReplyPost = await ApiService.PostService.GetPost(Post.ReplyRefId.Value);
            }
            catch (Exception)
            {
                // Handle error silently (matching mobile app pattern)
            }
        }

        // Subscribe to feed service events for real-time updates
        FeedService.PostInteractionChanged += OnPostInteractionChanged;
    }

    public void Dispose()
    {
        FeedService.PostInteractionChanged -= OnPostInteractionChanged;
    }

    private void OnPostInteractionChanged(object? sender, PostInteractionEventArgs e)
    {
        if (e.PostId == Post.Id)
        {
            CurrentSupportStatus = e.NewSupportStatus;
            if (e.NewSupportCount.HasValue)
            {
                CurrentSupportCount = e.NewSupportCount.Value;
            }
            StateHasChanged();
        }
    }

    private string GetPostTypeClass()
    {
        var baseClass = "post-card";

        if (Post.Type == PostType.Burn)
            baseClass += " burn-post";

        if (FullPost)
            baseClass += " full-post";

        return baseClass;
    }

    private string GetContentStyle()
    {
        var maxHeight = FullPost ? "none" : "200px";
        var overflow = FullPost ? "visible" : "hidden";
        return $"max-height: {maxHeight}; overflow: {overflow};";
    }

    private string GetTimeAgo()
    {
        return "";

        // var timeSpan = DateTime.UtcNow - Post.DateCreated.Value;

        // return timeSpan.TotalMinutes < 1 ? "now" :
        //        timeSpan.TotalMinutes < 60 ? $"{(int)timeSpan.TotalMinutes}m" :
        //        timeSpan.TotalHours < 24 ? $"{(int)timeSpan.TotalHours}h" :
        //        timeSpan.TotalDays < 7 ? $"{(int)timeSpan.TotalDays}d" :
        //        Post.DateCreated.Value.ToString("MMM d");
    }

    private string GetDetailedTimestamp()
    {
        //if (!Post.date.HasValue) return "";
        return "";
    }

    private bool IsImageMedia(MediaDto media)
    {
        if (string.IsNullOrEmpty(media.MediaPath)) return false;

        var extension = Path.GetExtension(media.MediaPath).ToLowerInvariant();
        return extension is ".jpg" or ".jpeg" or ".png" or ".gif" or ".webp" or ".bmp";
    }

    private bool IsVideoMedia(MediaDto media)
    {
        if (string.IsNullOrEmpty(media.MediaPath)) return false;

        var extension = Path.GetExtension(media.MediaPath).ToLowerInvariant();
        return extension is ".mp4" or ".webm" or ".ogg" or ".avi" or ".mov";
    }

    private string GetMediaGridClass()
    {
        return Post.PostMedia?.Count switch
        {
            2 => "media-grid-2",
            3 => "media-grid-3",
            4 or > 4 => "media-grid-4",
            _ => ""
        };
    }

    private int GetSupportCountDisplay()
    {
        return Math.Max(0, CurrentSupportCount ?? Post.SupportCount ?? 0);
    }

    // Event Handlers
    private async Task HandlePostClick()
    {
        Navigation.NavigateTo($"/posts/{Post.Id}");
    }

    private async Task HandleProfileClick()
    {
        Navigation.NavigateTo($"/profile/{Post.UserName}");
    }

    private async Task HandleOptionsClick()
    {
        // Implement options menu (report, block, etc.)
        // Could show a dropdown or modal
    }

    private async Task HandleCommentClick()
    {
        if (FullPost)
        {
            // Scroll to comments section or focus comment input
            await JSRuntime.InvokeVoidAsync("scrollToElement", "comments-section");
        }
        else
        {
            // Navigate to post detail page
            Navigation.NavigateTo($"/post/{Post.Id}");
        }
    }

    private async Task HandleShare()
    {
        try
        {
            var shareUrl = $"{Navigation.BaseUri}post/{Post.Id}";
            var shareData = new
            {
                title = $"Post by {Post.Name} (@{Post.UserName})",
                text = Post.Content?.Length > 100 ? Post.Content[..97] + "..." : Post.Content,
                url = shareUrl
            };

            await JSRuntime.InvokeVoidAsync("navigator.share", shareData);
        }
        catch
        {
            // Fallback to clipboard copy
            var shareUrl = $"{Navigation.BaseUri}post/{Post.Id}";
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareUrl);

            // Show toast notification
            await JSRuntime.InvokeVoidAsync("showToast", "Link copied to clipboard!");
        }
    }

    private async Task HandleMoreActions()
    {
        // Implement more actions menu (bookmark, copy link, etc.)
    }


    private async Task HandleQuotedPostClick()
    {
        if (ReplyPost != null)
        {
            switch(Post.ReplyType)
            {
                case ReplyType.Text:
                    Navigation.NavigateTo($"/post/{ReplyPost.Id}");
                    break;
                default:
                    break;
            }
        }
    }

    private async Task HandleQuotedProfileClick(BasePost quotedPost)
    {
        Navigation.NavigateTo($"/profile/{quotedPost.UserName}");
    }

    private async Task HandlePostVoteChanged(VoteButtons.VoteChangedEventArgs args)
    {
        // Update local post data if needed
        if (Post.Id == args.ContentId)
        {
            Post.SupportStatus = args.NewSupportStatus;
            Post.SupportCount = args.NewSupportCount;
            CurrentSupportStatus = args.NewSupportStatus;
            CurrentSupportCount = args.NewSupportCount;
            StateHasChanged();
        }
    }

    private async Task HandleViewLikes()
    {
        // Navigate to likes view
        Navigation.NavigateTo($"/posts/{Post.Id}/likes");
    }

    private async Task HandleViewComments()
    {
        // Navigate to comments or scroll to comments
        if (FullPost)
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", "comments-section");
        }
        else
        {
            Navigation.NavigateTo($"/posts/{Post.Id}#comments");
        }
    }

    private async Task HandleViewShares()
    {
        // Navigate to shares/reposts view
        Navigation.NavigateTo($"/posts/{Post.Id}/shares");
    }

    private async Task HandleShareClick()
    {
        if (isShareMenuVisible)
        {
            await HideShareMenu();
            return;
        }

        try
        {
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", shareButtonRef);
            shareMenuX = $"{rect.Left + (rect.Width / 2)}px";
            shareMenuY = $"{rect.Top - 10}px";
            isShareMenuVisible = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error positioning share menu: {ex.Message}");
            shareMenuX = "50%";
            shareMenuY = "50%";
            isShareMenuVisible = true;
            StateHasChanged();
        }
    }

    private async Task HideShareMenu()
    {
        isShareMenuVisible = false;
        StateHasChanged();
        await Task.CompletedTask;
    }

    // ADD THIS HELPER CLASS:
    public class BoundingClientRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
    }
}