@using Toxiq.WebApp.Client.Domain.Chat.Models

<div class="message-input-container">
    @if (ReplyToMessage != null)
    {
        <div class="reply-preview">
            <div class="reply-preview-content">
                <div class="reply-line"></div>
                <div class="reply-details">
                    <span class="reply-to-name">Replying to @(ReplyToMessage.IsSentByCurrentUser ? "yourself" : ReplyToMessage.SenderName)</span>
                    <span class="reply-to-text">@ReplyToMessage.GetPreviewText(50)</span>
                </div>
            </div>
            <button class="reply-cancel-btn" @onclick="CancelReply">✕</button>
        </div>
    }

    <div class="input-row">
        <div class="message-input-wrapper">
            <textarea @ref="messageInput"
                      @bind="MessageText"
                      @onkeypress="OnKeyPress"
                      @oninput="OnInput"
                      placeholder="Type a message..."
                      class="message-input"
                      rows="1"
                      disabled="@IsDisabled"></textarea>

            @if (ShowEmojiButton)
            {
                <button class="input-action-btn emoji-btn" @onclick="ToggleEmojiPicker" title="Emoji">
                    😊
                </button>
            }
        </div>

        <button class="send-btn @(CanSend ? "enabled" : "disabled")"
                @onclick="SendMessage"
                disabled="@(!CanSend || IsDisabled)"
                title="Send message">
            @if (IsSending)
            {
                <div class="sending-spinner"></div>
            }
            else
            {
                <span class="send-icon">➤</span>
            }
        </button>
    </div>

    @if (ShowCharacterCount && MessageText.Length > 400)
    {
        <div class="character-count @(MessageText.Length > 500 ? "warning" : "")">
            @MessageText.Length / 500
        </div>
    }
</div>

<style>
    .message-input-container {
        background-color: var(--off-black);
        border-top: 1px solid var(--gray-800);
        padding: 1rem;
    }

    .reply-preview {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: var(--transparent-white);
        border-radius: 8px;
        padding: 0.75rem;
        margin-bottom: 0.75rem;
        border-left: 3px solid var(--accent-color);
    }

    .reply-preview-content {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
        flex: 1;
    }

    .reply-line {
        width: 3px;
        height: 100%;
        background-color: var(--accent-color);
        border-radius: 1.5px;
        flex-shrink: 0;
    }

    .reply-details {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .reply-to-name {
        font-size: 12px;
        font-weight: 600;
        color: var(--accent-color);
    }

    .reply-to-text {
        font-size: 13px;
        color: var(--gray-300);
        opacity: 0.8;
    }

    .reply-cancel-btn {
        background: none;
        border: none;
        color: var(--gray-400);
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

        .reply-cancel-btn:hover {
            background-color: var(--gray-700);
            color: var(--white);
        }

    .input-row {
        display: flex;
        align-items: flex-end;
        gap: 0.75rem;
    }

    .message-input-wrapper {
        flex: 1;
        position: relative;
        background-color: var(--gray-800);
        border-radius: 20px;
        border: 2px solid transparent;
        transition: border-color 0.2s ease;
        display: flex;
        align-items: flex-end;
        padding-right: 0.5rem;
    }

        .message-input-wrapper:focus-within {
            border-color: var(--profile-color-default);
        }

    .message-input {
        flex: 1;
        background: transparent;
        border: none;
        color: var(--white);
        font-family: var(--font-family);
        font-size: 15px;
        padding: 0.75rem 1rem;
        resize: none;
        outline: none;
        line-height: 1.4;
        max-height: 120px;
        min-height: 44px;
        overflow-y: auto;
    }

        .message-input::placeholder {
            color: var(--gray-400);
        }

        .message-input:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .input-action-btn {
        background: none;
        border: none;
        color: var(--gray-400);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 6px;
        transition: all 0.2s ease;
        font-size: 16px;
    }

        .input-action-btn:hover {
            background-color: var(--gray-700);
            color: var(--white);
        }

    .send-btn {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 18px;
    }

        .send-btn.enabled {
            background-color: var(--profile-color-default);
            color: var(--white);
        }

            .send-btn.enabled:hover {
                background-color: var(--profile-color-blue);
                transform: scale(1.05);
            }

        .send-btn.disabled {
            background-color: var(--gray-700);
            color: var(--gray-500);
            cursor: not-allowed;
        }

    .send-icon {
        transform: rotate(0deg);
        transition: transform 0.2s ease;
    }

    .send-btn.enabled:hover .send-icon {
        transform: rotate(45deg);
    }

    .sending-spinner {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid var(--white);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .character-count {
        text-align: right;
        font-size: 11px;
        color: var(--gray-400);
        margin-top: 0.5rem;
    }

        .character-count.warning {
            color: var(--warning-color);
            font-weight: 600;
        }
</style>

@code {
    [Parameter] public string MessageText { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> MessageTextChanged { get; set; }
    [Parameter] public ChatMessage? ReplyToMessage { get; set; }
    [Parameter] public EventCallback<SendMessageRequest> OnSendMessage { get; set; }
    [Parameter] public EventCallback OnCancelReply { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsSending { get; set; }
    [Parameter] public bool ShowEmojiButton { get; set; } = true;
    [Parameter] public bool ShowCharacterCount { get; set; } = true;

    private ElementReference messageInput;
    private bool showEmojiPicker;

    private bool CanSend => !string.IsNullOrWhiteSpace(MessageText) && MessageText.Length <= 500;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await messageInput.FocusAsync();
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            //e.PreventDefault();
            await SendMessage();
        }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        MessageText = e.Value?.ToString() ?? string.Empty;
        await MessageTextChanged.InvokeAsync(MessageText);

        // Auto-resize textarea
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (!CanSend || IsSending) return;

        var request = new SendMessageRequest
            {
                Content = MessageText.Trim(),
                Type = ChatMessageType.Text,
                ReplyToMessageId = ReplyToMessage?.Id,
                TemporaryId = Guid.NewGuid()
            };

        await OnSendMessage.InvokeAsync(request);

        // Clear input
        MessageText = string.Empty;
        await MessageTextChanged.InvokeAsync(MessageText);

        // Cancel reply if active
        if (ReplyToMessage != null)
        {
            await CancelReply();
        }

        // Focus back to input
        await messageInput.FocusAsync();
    }

    private async Task CancelReply()
    {
        await OnCancelReply.InvokeAsync();
    }

    private void ToggleEmojiPicker()
    {
        showEmojiPicker = !showEmojiPicker;
        // TODO: Implement emoji picker
    }
}