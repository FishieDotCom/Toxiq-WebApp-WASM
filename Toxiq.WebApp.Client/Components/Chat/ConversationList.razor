@using Toxiq.WebApp.Client.Domain.Chat.Mappers
@using Toxiq.WebApp.Client.Domain.Chat.Models

<div class="conversation-list-container">
    <div class="conversation-list-header">
        <h2 class="list-title">Messages</h2>
        <div class="header-actions">
            <button class="header-btn" @onclick="StartNewChat" title="New message">
                ✏️
            </button>
            <button class="header-btn" @onclick="RefreshConversations" title="Refresh" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <div class="refresh-spinner"></div>
                }
                else
                {
                    <span>🔄</span>
                }
            </button>
        </div>
    </div>

    @if (ShowSearchBar)
    {
        <div class="search-bar">
            <input type="text"
                   @bind="SearchTerm"
                   @oninput="OnSearch"
                   placeholder="Search conversations..."
                   class="search-input" />
        </div>
    }

    <div class="conversation-list">
        @if (IsLoading && !Conversations.Any())
        {
            <div class="loading-conversations">
                @for (int i = 0; i < 5; i++)
                {
                    <div class="conversation-skeleton">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-content">
                            <div class="skeleton-line skeleton-name"></div>
                            <div class="skeleton-line skeleton-message"></div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (!FilteredConversations.Any())
        {
            <div class="empty-state">
                @if (string.IsNullOrEmpty(SearchTerm))
                {
                    <div class="empty-icon">💬</div>
                    <h3 class="empty-title">No conversations yet</h3>
                    <p class="empty-description">Start a new conversation to begin chatting with others.</p>
                    <button class="start-chat-btn" @onclick="StartNewChat">
                        Start New Chat
                    </button>
                }
                else
                {
                    <div class="empty-icon">🔍</div>
                    <h3 class="empty-title">No results found</h3>
                    <p class="empty-description">Try searching with different terms.</p>
                }
            </div>
        }
        else
        {
            @foreach (var conversation in FilteredConversations)
            {
                <ConversationCard Conversation="conversation"
                                  IsSelected="SelectedConversation?.Id == conversation.Id"
                                  OnConversationSelected="OnConversationSelectedAction" />
            }
        }
    </div>
</div>

<style>
    .conversation-list-container {
        height: 100%;
        display: flex;
        flex-direction: column;
        background-color: var(--off-black);
    }

    .conversation-list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid var(--gray-800);
    }

    .list-title {
        font-size: 24px;
        font-weight: 700;
        color: var(--white);
        margin: 0;
    }

    .header-actions {
        display: flex;
        gap: 0.5rem;
    }

    .header-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        background-color: var(--gray-800);
        color: var(--gray-300);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        font-size: 16px;
    }

        .header-btn:hover:not(:disabled) {
            background-color: var(--gray-700);
            color: var(--white);
            transform: scale(1.05);
        }

        .header-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .refresh-spinner {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid var(--gray-300);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .search-bar {
        padding: 0 1rem 1rem;
    }

    .search-input {
        width: 100%;
        background-color: var(--gray-800);
        border: 2px solid transparent;
        border-radius: 12px;
        padding: 0.75rem 1rem;
        color: var(--white);
        font-size: 14px;
        transition: border-color 0.2s ease;
    }

        .search-input:focus {
            outline: none;
            border-color: var(--profile-color-default);
        }

        .search-input::placeholder {
            color: var(--gray-400);
        }

    .conversation-list {
        flex: 1;
        overflow-y: auto;
        padding: 0 1rem;
    }

    .loading-conversations {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem 0;
    }

    .conversation-skeleton {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        border-radius: 12px;
        background-color: var(--transparent-black);
    }

    .skeleton-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: linear-gradient(90deg, var(--gray-800) 25%, var(--gray-700) 50%, var(--gray-800) 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
    }

    .skeleton-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .skeleton-line {
        background: linear-gradient(90deg, var(--gray-800) 25%, var(--gray-700) 50%, var(--gray-800) 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
        border-radius: 4px;
    }

    .skeleton-name {
        height: 16px;
        width: 60%;
    }

    .skeleton-message {
        height: 14px;
        width: 80%;
    }

    @@keyframes loading {
        0%

    {
        background-position: 200% 0;
    }

    100% {
        background-position: -200% 0;
    }

    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem 2rem;
        text-align: center;
        height: 60%;
    }

    .empty-icon {
        font-size: 64px;
        margin-bottom: 1rem;
        opacity: 0.6;
    }

    .empty-title {
        font-size: 20px;
        font-weight: 600;
        color: var(--white);
        margin: 0 0 0.5rem;
    }

    .empty-description {
        font-size: 14px;
        color: var(--gray-400);
        margin: 0 0 2rem;
        line-height: 1.5;
    }

    .start-chat-btn {
        background-color: var(--profile-color-default);
        color: var(--white);
        border: none;
        border-radius: 12px;
        padding: 0.75rem 1.5rem;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .start-chat-btn:hover {
            background-color: var(--profile-color-blue);
            transform: translateY(-1px);
        }
</style>

@code {
    [Parameter] public List<ChatConversation> Conversations { get; set; } = new();
    [Parameter] public ChatConversation? SelectedConversation { get; set; }
    [Parameter] public EventCallback<ChatConversation> OnConversationSelected { get; set; }
    [Parameter] public EventCallback OnNewChatRequested { get; set; }
    [Parameter] public EventCallback OnRefreshRequested { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool ShowSearchBar { get; set; } = true;

    private string SearchTerm = string.Empty;
    private List<ChatConversation> FilteredConversations =>
        Conversations.FilterBySearchTerm(SearchTerm).SortByLastMessage();

    private async Task OnConversationSelectedAction(ChatConversation conversation)
    {
        await OnConversationSelected.InvokeAsync(conversation);
    }

    private async Task StartNewChat()
    {
        await OnNewChatRequested.InvokeAsync();
    }

    private async Task RefreshConversations()
    {
        await OnRefreshRequested.InvokeAsync();
    }

    private async Task OnSearch(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        await InvokeAsync(StateHasChanged);
    }
}