@using Toxiq.WebApp.Client.Domain.Chat.Models

<div class="conversation-card @(IsSelected ? "selected" : "")" @onclick="OnConversationClick">
    <div class="conversation-avatar">
        <div class="avatar-circle @(Conversation.IsGroup ? "group-avatar" : "user-avatar")">
            @Conversation.UserAvatar
        </div>
        @if (Conversation.HasUnreadMessages)
        {
            <div class="unread-indicator"></div>
        }
    </div>

    <div class="conversation-content">
        <div class="conversation-header">
            <h3 class="conversation-name">@Conversation.DisplayName</h3>
            <span class="conversation-time">@Conversation.LastMessageTime</span>
        </div>

        <div class="conversation-preview">
            <p class="last-message @(Conversation.HasUnreadMessages ? "unread" : "")">
                @Conversation.LastMessagePreview
            </p>
            @if (Conversation.UnreadCount > 0)
            {
                <div class="unread-count">
                    @(Conversation.UnreadCount > 99 ? "99+" : Conversation.UnreadCount.ToString())
                </div>
            }
        </div>
    </div>
</div>

<style>
    .conversation-card {
        display: flex;
        align-items: center;
        padding: 1rem;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid transparent;
        background-color: var(--transparent-black);
    }

        .conversation-card:hover {
            background-color: var(--transparent-white);
            border-color: var(--gray-600);
        }

        .conversation-card.selected {
            background-color: var(--profile-color-default);
            border-color: var(--white);
        }

    .conversation-avatar {
        position: relative;
        margin-right: 1rem;
    }

    .avatar-circle {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 18px;
        color: var(--white);
        background: linear-gradient(135deg, var(--profile-color-default), var(--profile-color-blue));
    }

    .user-avatar {
        background: linear-gradient(135deg, var(--profile-color-purple), var(--profile-color-blue));
    }

    .group-avatar {
        background: linear-gradient(135deg, var(--profile-color-green), var(--profile-color-teal));
    }

    .unread-indicator {
        position: absolute;
        top: -2px;
        right: -2px;
        width: 12px;
        height: 12px;
        background-color: var(--accent-color);
        border-radius: 50%;
        border: 2px solid var(--off-black);
    }

    .conversation-content {
        flex: 1;
        min-width: 0;
    }

    .conversation-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.25rem;
    }

    .conversation-name {
        font-size: 16px;
        font-weight: 600;
        color: var(--white);
        margin: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px;
    }

    .conversation-time {
        font-size: 12px;
        color: var(--gray-400);
        white-space: nowrap;
    }

    .conversation-preview {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .last-message {
        font-size: 14px;
        color: var(--gray-300);
        margin: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 220px;
    }

        .last-message.unread {
            color: var(--white);
            font-weight: 500;
        }

    .unread-count {
        background-color: var(--accent-color);
        color: var(--white);
        font-size: 11px;
        font-weight: 600;
        padding: 2px 6px;
        border-radius: 10px;
        min-width: 18px;
        text-align: center;
        white-space: nowrap;
    }
</style>

@code {
    [Parameter] public ChatConversation Conversation { get; set; } = new();
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public EventCallback<ChatConversation> OnConversationSelected { get; set; }

    private async Task OnConversationClick()
    {
        await OnConversationSelected.InvokeAsync(Conversation);
    }
}
