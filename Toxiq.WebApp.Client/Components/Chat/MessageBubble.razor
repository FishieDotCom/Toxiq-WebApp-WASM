@using Toxiq.WebApp.Client.Domain.Chat.Models

<div class="message-container @Alignment">
    @if (!Message.IsSentByCurrentUser && IsGroupMessage)
    {
        <div class="sender-name">@Message.SenderName</div>
    }

    <div class="message-bubble @BubbleClass @(Message.IsFailed ? "failed" : "")">
        @if (Message.ReplyToMessage != null)
        {
            <div class="reply-reference">
                <div class="reply-line"></div>
                <div class="reply-content">
                    <span class="reply-sender">@(Message.ReplyToMessage.IsSentByCurrentUser ? "You" : Message.ReplyToMessage.SenderName)</span>
                    <span class="reply-text">@Message.ReplyToMessage.GetPreviewText(30)</span>
                </div>
            </div>
        }

        <div class="message-content">
            @switch (Message.Type)
            {
                case ChatMessageType.Text:
                    <span class="message-text">@Message.Content</span>
                    break;
                case ChatMessageType.Image:
                    <div class="message-media">
                        <img src="@Message.Content" alt="Image" class="message-image" />
                    </div>
                    break;
                case ChatMessageType.Sticker:
                    <div class="message-sticker">@Message.Content</div>
                    break;
                default:
                    <span class="message-text">@Message.GetPreviewText()</span>
                    break;
            }
        </div>

        <div class="message-footer">
            <span class="message-time">@Message.FormattedTime</span>
            @if (Message.IsEdited)
            {
                <span class="edited-indicator">@Message.EditedIndicator</span>
            }
            @if (Message.IsSentByCurrentUser)
            {
                <span class="message-status">@Message.StatusIcon</span>
            }
        </div>
    </div>

    @if (ShowMessageOptions)
    {
        <div class="message-options">
            @if (Message.CanReply())
            {
                <button class="message-option-btn" @onclick="OnReplyClick" title="Reply">
                    ↩️
                </button>
            }
            @if (Message.CanEdit())
            {
                <button class="message-option-btn" @onclick="OnEditClick" title="Edit">
                    ✏️
                </button>
            }
            @if (Message.CanDelete())
            {
                <button class="message-option-btn danger" @onclick="OnDeleteClick" title="Delete">
                    🗑️
                </button>
            }
        </div>
    }
</div>

<style>
    .message-container {
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }

        .message-container.left {
            align-items: flex-start;
        }

        .message-container.right {
            align-items: flex-end;
        }

    .sender-name {
        font-size: 12px;
        color: var(--gray-400);
        margin-bottom: 0.25rem;
        margin-left: 0.5rem;
    }

    .message-bubble {
        max-width: 70%;
        padding: 0.75rem 1rem;
        border-radius: 18px;
        position: relative;
        word-wrap: break-word;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .message-sent {
        background-color: var(--profile-color-default);
        color: var(--white);
        border-bottom-right-radius: 4px;
    }

    .message-received {
        background-color: var(--gray-700);
        color: var(--white);
        border-bottom-left-radius: 4px;
    }

    .message-bubble.failed {
        background-color: var(--error-color);
        opacity: 0.7;
    }

    .reply-reference {
        margin-bottom: 0.5rem;
        padding: 0.5rem;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .reply-line {
        width: 3px;
        height: 100%;
        background-color: var(--accent-color);
        border-radius: 1.5px;
        flex-shrink: 0;
    }

    .reply-content {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .reply-sender {
        font-size: 12px;
        font-weight: 600;
        color: var(--accent-color);
    }

    .reply-text {
        font-size: 13px;
        color: var(--gray-300);
        opacity: 0.8;
    }

    .message-content {
        margin-bottom: 0.25rem;
    }

    .message-text {
        font-size: 15px;
        line-height: 1.4;
    }

    .message-media {
        margin: -0.25rem -0.5rem 0.25rem -0.5rem;
    }

    .message-image {
        max-width: 100%;
        border-radius: 12px;
        display: block;
    }

    .message-sticker {
        font-size: 48px;
        line-height: 1;
    }

    .message-footer {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .message-time {
        font-size: 11px;
        color: rgba(255, 255, 255, 0.6);
    }

    .edited-indicator {
        font-size: 10px;
        color: rgba(255, 255, 255, 0.5);
        font-style: italic;
    }

    .message-status {
        font-size: 12px;
    }

    .message-options {
        display: flex;
        gap: 0.25rem;
        margin-top: 0.25rem;
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .message-container:hover .message-options {
        opacity: 1;
    }

    .message-option-btn {
        background: var(--gray-700);
        border: none;
        border-radius: 6px;
        padding: 0.25rem 0.5rem;
        cursor: pointer;
        font-size: 12px;
        transition: background-color 0.2s ease;
    }

        .message-option-btn:hover {
            background: var(--gray-600);
        }

        .message-option-btn.danger:hover {
            background: var(--error-color);
        }
</style>

@code {
    [Parameter] public ChatMessage Message { get; set; } = new();
    [Parameter] public bool IsGroupMessage { get; set; }
    [Parameter] public bool ShowMessageOptions { get; set; } = true;
    [Parameter] public EventCallback<ChatMessage> OnReply { get; set; }
    [Parameter] public EventCallback<ChatMessage> OnEdit { get; set; }
    [Parameter] public EventCallback<ChatMessage> OnDelete { get; set; }

    private string Alignment => Message.IsSentByCurrentUser ? "right" : "left";
    private string BubbleClass => Message.IsSentByCurrentUser ? "message-sent" : "message-received";

    private async Task OnReplyClick()
    {
        await OnReply.InvokeAsync(Message);
    }

    private async Task OnEditClick()
    {
        await OnEdit.InvokeAsync(Message);
    }

    private async Task OnDeleteClick()
    {
        await OnDelete.InvokeAsync(Message);
    }
}
