@using Toxiq.WebApp.Client.Services.Authentication
@inject IAuthenticationService AuthService
@inject ILogger<AuthenticationProvider> Logger

@if (isInitialized)
{
    @ChildContent
}
else
{
    <div class="app-loading">
        <div class="loading-spinner-large"></div>
        <p>Loading...</p>
    </div>
}

<style>
    .app-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background-color: var(--off-black);
        color: var(--white);
    }

    .loading-spinner-large {
        width: 40px;
        height: 40px;
        border: 3px solid var(--transparent-white);
        border-top: 3px solid var(--white);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    .app-loading p {
        font-size: 16px;
        color: var(--gray-300);
        margin: 0;
    }
</style>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }

    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogDebug("Initializing authentication provider...");

            // This will trigger the authentication service initialization
            await AuthService.IsAuthenticatedAsync();

            Logger.LogDebug("Authentication provider initialized");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing authentication provider");
        }
        finally
        {
            isInitialized = true;
            StateHasChanged();
        }
    }
}