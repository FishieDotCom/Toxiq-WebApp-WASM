@* Simplified ShareContextMenu.razor *@
@using Toxiq.Mobile.Dto
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="simple-share-menu-backdrop" @onclick="Hide"></div>
    <div class="simple-share-menu">
        <button @onclick="HandleEcho">Echo</button>
        <button @onclick="HandleCopyLink">Copy Link</button>
        <button @onclick="HandleShare">Share</button>
    </div>
}

<style>
.simple-share-menu-backdrop {
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.1);
    z-index: 1000;
}
.simple-share-menu {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: #222;
    color: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 24px rgba(0,0,0,0.2);
    min-width: 180px;
    padding: 12px 0;
    z-index: 1001;
    display: flex;
    flex-direction: column;
    gap: 4px;
}
.simple-share-menu button {
    background: none;
    border: none;
    color: inherit;
    font-size: 1rem;
    padding: 12px 24px;
    text-align: left;
    cursor: pointer;
    border-radius: 8px;
    transition: background 0.15s;
}
.simple-share-menu button:hover {
    background: #333;
}
</style>

@code {
    [Parameter] public BasePost Post { get; set; } = default!;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnHide { get; set; }
    [Parameter] public string? MenuX { get; set; }
    [Parameter] public string? MenuY { get; set; }

    private async Task HandleEcho()
    {
        await Hide();
        var echoUrl = $"/create-post?EchoPostId={Post.Id}&IsEcho=true&EchoReplyType=Text";
        Navigation.NavigateTo(echoUrl);
    }

    private async Task HandleCopyLink()
    {
        await Hide();
        var postUrl = $"{Navigation.BaseUri}post/{Post.Id}";
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", postUrl);
            await JSRuntime.InvokeVoidAsync("showToast", "Link copied to clipboard!");
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("fallbackCopyTextToClipboard", postUrl);
            await JSRuntime.InvokeVoidAsync("showToast", "Link copied to clipboard!");
        }
    }

    private async Task HandleShare()
    {
        await Hide();
        var shareUrl = $"{Navigation.BaseUri}post/{Post.Id}";
        try
        {
            var shareData = new
            {
                title = $"Post by @{Post.UserName}",
                text = Post.Content?.Length > 100 ? Post.Content[..97] + "..." : Post.Content,
                url = shareUrl
            };
            await JSRuntime.InvokeVoidAsync("navigator.share", shareData);
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareUrl);
            await JSRuntime.InvokeVoidAsync("showToast", "Link copied to clipboard!");
        }
    }

    private async Task Hide()
    {
        if (OnHide.HasDelegate)
            await OnHide.InvokeAsync();
    }
}