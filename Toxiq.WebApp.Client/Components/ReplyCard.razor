@* Toxiq.WebApp.Client/Components/ReplyCard.razor *@
@* ReplyCard Component - Matches Mobile App ReplyCardControl functionality *@
@using Microsoft.FluentUI.AspNetCore.Components
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Services.Feed
@inject IFeedService FeedService
@inject IApiService ApiService

<div class="reply-card @GetReplyTypeClass()">
    <div class="reply-content">
        <!-- Reply Header -->
        <div class="reply-header">
            <div class="reply-author" @onclick:stopPropagation="true">
                <span class="reply-author-name">@ReplyPost.Name</span>
                <span class="reply-author-username">@@@ReplyPost.UserName</span>
            </div>
            @if (ReplyPost.Type == PostType.Burn)
            {
                <div class="reply-burn-indicator">🔥</div>
            }
        </div>

        <!-- Reply Text Content -->
        @if (!string.IsNullOrEmpty(ReplyPost.Content))
        {
            <div class="reply-text" style="@GetReplyContentStyle()">
                <FormattedText Text="@ReplyPost.Content" />
            </div>
        }

        <!-- Reply Media (Images/Video) -->
        @if (ReplyPost.PostMedia?.Count > 0)
        {
            <div class="reply-media">
                @foreach (var media in ReplyPost.PostMedia.Take(1)) // Only show first media item in reply
                {
                    @if (IsImageMedia(media))
                    {
                        <img src="@media.MediaPath"
                        alt="Reply attachment"
                        class="reply-image"
    
                        @onclick:stopPropagation="true" />
                    }
                    else if (IsVideoMedia(media))
                    {
                        <video class="reply-video" controls>
                            <source src="@media.MediaPath" type="video/mp4">
                            Your browser does not support video playback.
                        </video>
                    }
                }
            </div>
        }

        <!-- Reply Link/URL Preview (if applicable) -->
        @if (HasLinkPreview())
        {
            <div class="reply-link-preview">
                <div class="link-preview-content">
                    <div class="link-preview-title">@GetLinkTitle()</div>
                    <div class="link-preview-description">@GetLinkDescription()</div>
                    <div class="link-preview-url">@GetLinkUrl()</div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public BasePost Post { get; set; } = default!;
    [Parameter] public BasePost ReplyPost { get; set; } = default!;
    [Parameter] public bool IsFullPost { get; set; } = false;
    [Parameter] public bool ShowActions { get; set; } = false;
    [Parameter] public EventCallback<BasePost> OnReplyClick { get; set; }
    [Parameter] public EventCallback<BasePost> OnProfileClick { get; set; }

    protected override void OnInitialized()
    {
        LoadEchoPost();
    }

    private async Task LoadEchoPost()
    {
        try
        {
            switch (Post.ReplyType)
            {
                case ReplyType.Text:
                    ReplyPost = await ApiService.PostService.GetPost(Post.ReplyRefId.GetValueOrDefault());
                    break;
                case ReplyType.Note:
                    var note = await ApiService.NotesService.GetNote(Post.ReplyRefId.GetValueOrDefault());
                    ReplyPost = new();
                    ReplyPost.Id = note.Id;
                    ReplyPost.Content = note.Content;
                    ReplyPost.Name = "💢❔";
                    ReplyPost.UserName = "Anon";
                    break;
                case ReplyType.Prompt:
                    ReplyPost = await ApiService.PostService.GetPrompt((Guid)Post.ReplyRefId);
                    break;
                default:
                    break;

            }

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading echo post: {ex.Message}");
        }
    }

    public void Dispose()
    {
    }



    private string GetReplyTypeClass()
    {
        var baseClass = "reply-card";

        // Add specific classes based on reply type and content
        if (Post.ReplyType == ReplyType.Text)
            baseClass += " reply-echo";
        else if (Post.ReplyType == ReplyType.Comment)
            baseClass += " reply-comment";
        else if (Post.ReplyType == ReplyType.Note)
            baseClass += " reply-note";

        if (Post.Type == PostType.Burn)
            baseClass += " reply-burn";

        return baseClass;
    }

    private string GetReplyContentStyle()
    {
        var maxHeight = IsFullPost ? "none" : "80px";
        var overflow = IsFullPost ? "visible" : "hidden";
        return $"max-height: {maxHeight}; overflow: {overflow};";
    }

    private bool IsImageMedia(MediaDto media)
    {
        if (string.IsNullOrEmpty(media.MediaPath)) return false;

        var extension = Path.GetExtension(media.MediaPath).ToLowerInvariant();
        return extension is ".jpg" or ".jpeg" or ".png" or ".gif" or ".webp" or ".bmp";
    }

    private bool IsVideoMedia(MediaDto media)
    {
        if (string.IsNullOrEmpty(media.MediaPath)) return false;

        var extension = Path.GetExtension(media.MediaPath).ToLowerInvariant();
        return extension is ".mp4" or ".webm" or ".ogg" or ".avi" or ".mov";
    }

    private bool HasLinkPreview()
    {
        // Check if post content contains URLs and has link preview data
        // This would typically come from the API
        return false; // Implement based on your link preview system
    }

    private string GetLinkTitle() => ""; // Implement based on your link preview data
    private string GetLinkDescription() => ""; // Implement based on your link preview data
    private string GetLinkUrl() => ""; // Implement based on your link preview data

  
}