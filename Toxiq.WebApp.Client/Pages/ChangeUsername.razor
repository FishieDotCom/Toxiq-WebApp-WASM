@page "/change"
@page "/change-username"
@using System.Text.RegularExpressions
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Components
@using Toxiq.WebApp.Client.Services.Api
@using Toxiq.WebApp.Client.Services.Authentication
@inject NavigationManager Navigation
@inject IApiService ApiService
@inject IAuthenticationService AuthService
@inject IJSRuntime JS

<PageTitle>Change Username - Toxiq</PageTitle>

<TopNavBar ShowBackButton="true" PageTitle="Change Username">
</TopNavBar>

<!-- Ensure authentication -->
@if (!AuthService.IsAuthenticated().GetValueOrDefault(false))
{
    <LoadingSpinner />
}
else
{
    <div class="change-username-container">
        <div class="change-username-content">
            
            <!-- Logo Section (matching mobile app) -->
            <div class="logo-section">
                <Logo Height="250" Width="250"/>
            </div>

            <!-- Username Input Section -->
            <div class="input-section">
                <UsernameInput 
                    @bind-Value="@username"
                    IsLoading="@isLoading"
                    HasError="@hasError"
                    ErrorText="@errorText"
                    OnInput="@HandleUsernameInput" />
                
                <!-- Help Text -->
                <div class="help-text">Your username cannot be changed!</div>
            </div>

            <!-- Action Button Section -->
            <div class="button-section">
                <PrimaryButton 
                    OnClick="@SubmitUsername"
                    IsLoading="@isLoading"
                    LoadingText="Setting Username..."
                    ButtonText="Set Username" />
            </div>

        </div>
    </div>
}

@code {
    private string username = "";
    private bool isLoading = false;
    private bool hasError = false;
    private string errorText = "";
    private UserProfile profile = new UserProfile();

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        try
        {
            profile = await ApiService.UserService.GetMe();
            username = profile.UserName ?? "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profile: {ex.Message}");
        }
    }

    private void HandleUsernameInput(string value)
    {
        username = value;
        // Clear errors when user starts typing
        if (hasError)
        {
            hasError = false;
            errorText = "";
            StateHasChanged();
        }
    }

    private async Task SubmitUsername()
    {
        // Reset states
        hasError = false;
        errorText = "";
        isLoading = true;
        StateHasChanged();

        try
        {
            // Validation (mirrors mobile app validation exactly)
            if (!ValidateUsername())
            {
                return;
            }

            // Check username availability
            var available = await ApiService.UserService.CheckUsername(username);
            if (!available)
            {
                hasError = true;
                errorText = "Username unavailable";
                return;
            }

            // Change username
            var result = await ApiService.UserService.ChangeUsername(username);
            if (result)
            {
                // Navigate to next step (mirrors mobile app navigation)
                Navigation.NavigateTo("/edit-profile?CanGoBack=false");
            }
            else
            {
                hasError = true;
                errorText = "Failed to change username. Please try again.";
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorText = "An error occurred. Please try again.";
            Console.WriteLine($"Error changing username: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool ValidateUsername()
    {
        // Check if username starts with "user" (invalid)
        if (username.StartsWith("user"))
        {
            hasError = true;
            errorText = "Invalid Username";
            return false;
        }

        // Check username length (4-15 characters)
        if (!ValidateUsernameLength(username))
        {
            hasError = true;
            errorText = "Username must be between 4-15 characters";
            return false;
        }

        // Check allowed characters (alphanumeric, underscore, and Dhivehi/Thaana)
        // Mobile app pattern with Dhivehi support: ^[a-zA-Z0-9_ހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣޤޥަާިީުޫެޭޮޯްޱ]{4,15}$
        string pattern = @"^[a-zA-Z0-9_ހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣޤޥަާިީުޫެޭޮޯްޱ]{4,15}$";
        
        Regex regex = new Regex(pattern);
        bool isValid = regex.IsMatch(username);

        if (!isValid)
        {
            hasError = true;
            errorText = "Username can only contain alphanumeric characters, Thaana and _";
            return false;
        }

        return true;
    }

    private bool ValidateUsernameLength(string userName)
    {
        string pattern = @"^.{4,15}$";
        Regex regex = new Regex(pattern);
        return regex.IsMatch(userName);
    }
}

<style>
    .change-username-container {
        background-color: var(--background-color);
        display: flex;
        justify-content: center;
        padding: var(--spacing-lg);
        gap: 10px;
    }

    .change-username-content {
        width: 100%;
        max-width: 400px;
        display: grid;
        grid-template-rows: auto 1fr auto;
        gap: var(--spacing-xl);
        padding: var(--spacing-xl);
    }

    .logo-section {
        display: flex;
        justify-content: center;
        margin-bottom: var(--spacing-lg);
    }

    .input-section {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-sm);
    }

    .help-text {
        color: var(--gray-300);
        font-size: var(--font-size-sm);
        text-align: center;
        margin-top: var(--spacing-sm);
    }

    .button-section {
        display: flex;
        justify-content: center;
        margin-top: var(--spacing-xl);
    }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .change-username-container {
            padding: var(--spacing-base);
        }
        
        .change-username-content {
            padding: var(--spacing-lg);
        }
    }
</style>