@page "/"
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Components
@using Toxiq.WebApp.Client.Components.Core
@using Toxiq.WebApp.Client.Services.Feed
@using Toxiq.WebApp.Client.Services.Authentication
@inherits ComponentBase
@implements IDisposable
@inject IFeedService FeedService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Toxiq - Home</PageTitle>
<TopNavBar ShowBackButton="false">
    <MiddleContent>
        <div class="logo-container">
            <Logo />
        </div>
    </MiddleContent>
</TopNavBar>

<div class="home-feed-container centered-container">
    @if (isAuthenticated)
    {
        <!-- Infinite Scroll with parent-controlled logic -->
        <div class="feed-content">
            <InfiniteScrollView TItem="BasePost"
                                Items="@posts"
                                ItemTemplate="@PostTemplate"
                                OnLoadMore="@LoadMorePosts"
                                IsLoading="@isLoadingMore"
                                HasMoreItems="@canLoadMore"
                                EmptyMessage="No posts in your feed yet. Follow some users to see their posts!"
                                CssClass="feed-list" />
        </div>

        <!-- Debug Panel -->
        <div class="debug-panel" style="position: fixed; bottom: 80px; right: 10px; background: rgba(0,0,0,0.9); color: white; padding: 12px; font-size: 11px; border-radius: 8px; max-width: 200px; z-index: 1000;">
            <div><strong>Feed Debug:</strong></div>
            <div>Posts: @posts.Count</div>
            <div>Page: @currentPage</div>
            <div>Loading: @isLoadingMore</div>
            <div>Can Load: @canLoadMore</div>
            <div>Load Calls: @loadMoreCallCount</div>
            <hr style="margin: 4px 0;" />
            <button @onclick="DebugLoadMore" style="background: #007acc; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 10px;">
                Force Load
            </button>
            <button @onclick="DebugRefresh" style="background: #28a745; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 10px; margin-left: 4px;">
                Refresh
            </button>
        </div>

        <!-- Floating Action Button -->
        <button class="floating-action-button" @onclick="GoToCreate">
            ➕
        </button>
    }
    else
    {
        <!-- Not authenticated state -->
        <div class="not-authenticated">
            <div class="welcome-content">
                <ToxiqLogo Height="64" />
                <h1 class="welcome-title">Welcome to Toxiq</h1>
                <p class="welcome-subtitle">Connect with your community</p>
                <PrimaryButton ButtonText="Sign In" OnClick="@GoToLogin" />
            </div>
        </div>
    }
</div>

@code {
    // State - parent controls everything
    private List<BasePost> posts = new();
    private bool isAuthenticated = false;
    private UserProfile? currentUser;
    private bool isLoadingMore = false;
    private bool canLoadMore = true;
    private int currentPage = 0;
    private int pageSize = 20;

    // Debug tracking
    private int loadMoreCallCount = 0;

    // Template for rendering each post
    private RenderFragment<BasePost> PostTemplate = (post) => __builder =>
    {
        <PostCard Post="@post" FullPost="false" />
    };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("HomeFeed: Initializing");

        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Check initial authentication state
        isAuthenticated = await AuthService.IsAuthenticatedAsync();

        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            await LoadInitialFeed();
        }
    }

    private async Task LoadInitialFeed()
    {
        Console.WriteLine("HomeFeed: Loading initial feed");

        try
        {
            isLoadingMore = true;
            currentPage = 0;

            var filter = new GetPostDto { Page = currentPage, Count = pageSize };
            var result = await FeedService.GetFeedAsync(filter);

            posts = result.Data.ToList();
            canLoadMore = result.Data.Count == pageSize; // Can load more if we got full page

            Console.WriteLine($"HomeFeed: Initial load complete - {posts.Count} posts, canLoadMore={canLoadMore}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HomeFeed: Error loading initial feed: {ex.Message}");
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task LoadMorePosts()
    {
        loadMoreCallCount++;
        Console.WriteLine($"HomeFeed: LoadMorePosts called (#{loadMoreCallCount})");

        if (isLoadingMore)
        {
            Console.WriteLine("HomeFeed: Already loading, skipping");
            return;
        }

        if (!canLoadMore)
        {
            Console.WriteLine("HomeFeed: No more items to load");
            return;
        }

        try
        {
            isLoadingMore = true;
            currentPage++;
            StateHasChanged(); // Show loading state immediately

            Console.WriteLine($"HomeFeed: Loading page {currentPage}");

            var filter = new GetPostDto { Page = currentPage, Count = pageSize };
            var result = await FeedService.LoadMorePostsAsync(filter);

            Console.WriteLine($"HomeFeed: Got {result.Data.Count} new posts");

            if (result.Data.Any())
            {
                posts.AddRange(result.Data);
                canLoadMore = result.Data.Count == pageSize; // Can load more if we got full page
            }
            else
            {
                canLoadMore = false; // No more data
            }

            Console.WriteLine($"HomeFeed: LoadMore complete - total posts: {posts.Count}, canLoadMore: {canLoadMore}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HomeFeed: Error loading more posts: {ex.Message}");
            currentPage--; // Rollback page increment on error
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task RefreshFeed()
    {
        Console.WriteLine("HomeFeed: Refreshing feed");

        try
        {
            posts.Clear();
            currentPage = 0;
            canLoadMore = true;
            await LoadInitialFeed();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HomeFeed: Error refreshing feed: {ex.Message}");
        }
    }

    // Debug methods
    private async Task DebugLoadMore()
    {
        Console.WriteLine("HomeFeed: DEBUG - Manual LoadMore");
        await LoadMorePosts();
    }

    private async Task DebugRefresh()
    {
        Console.WriteLine("HomeFeed: DEBUG - Manual Refresh");
        await RefreshFeed();
    }

    private void GoToCreate()
    {
        Navigation.NavigateTo("/create-post");
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void OnAuthenticationStateChanged(object sender, AuthenticationStateChangedEventArgs e)
    {
        Console.WriteLine($"HomeFeed: Auth state changed - authenticated: {e.IsAuthenticated}");

        isAuthenticated = e.IsAuthenticated;
        currentUser = e.User;

        if (isAuthenticated && !posts.Any())
        {
            InvokeAsync(LoadInitialFeed);
        }
        else if (!isAuthenticated)
        {
            posts.Clear();
            canLoadMore = true;
            currentPage = 0;
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}