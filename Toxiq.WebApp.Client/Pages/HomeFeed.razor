
@page "/"
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Components.Core
@using Toxiq.WebApp.Client.Components.Feed
@using Toxiq.WebApp.Client.Services.Feed
@using Toxiq.WebApp.Client.Services.Authentication
@inherits ComponentBase
@implements IDisposable
@inject IFeedService FeedService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Toxiq - Home</PageTitle>

<div class="home-feed-container">
    @if (isAuthenticated)
    {
        <!-- Navigation Header -->
        <div class="feed-header">
            <div class="header-content">
                <div class="header-left">
                    <button class="nav-btn" @onclick="GoToProfile" title="Profile">
                        @*<ProfileAvatar User="@currentUser" Size="32" />*@
                    </button>
                </div>
                
                <div class="header-center">
                    <ToxiqLogo Height="28" />
                </div>
                
                <div class="header-right">
                    @*<NotificationBell Count="@notificationCount" />*@
                 </div>
            </div>
        </div>

        <!-- Feed Content using CollectionView -->
        <div class="feed-content">
            <FeedCollectionView TPost="BasePost"
                                Posts="@posts"
                                IsLoading="@isLoadingMore"
                                HasMoreItems="@canLoadMore"
                                VirtualizationEnabled="@useVirtualization"
                                EstimatedPostHeight="@estimatedPostHeight"
                                EmptyMessage="@GetEmptyMessage()"
                                OnLoadMore="@LoadMorePosts"
                                OnRefresh="@RefreshFeed"
                                OnPostClick="@HandlePostClick"
                                ShowFullPosts="false"
                                ShowActions="true" />
        </div>

        <!-- Floating Create Post Button -->
        <FloatingActionButton Icon="➕" 
                              Text="Post"
                              OnClick="@GoToCreate"
                              CssClass="create-post-fab" />
    }
    else
    {
        <!-- Not authenticated state -->
        <div class="not-authenticated">
            <div class="welcome-content">
                <ToxiqLogo Height="64" />
                <h1 class="welcome-title">Welcome to Toxiq</h1>
                <p class="welcome-subtitle">Connect with your community</p>
                <PrimaryButton ButtonText="Sign In" 
                               OnClick="@GoToLogin" />
            </div>
        </div>
    }
</div>

@code {
    // State management
    private List<BasePost> posts = new();
    private GetPostDto searchQuery = new() { Page = 0, Count = 20 };
    private bool isLoadingMore = false;
    private bool canLoadMore = true;
    private bool isAuthenticated = false;
    private UserProfile? currentUser;
    private int notificationCount = 0;

    // Performance settings
    private bool useVirtualization = true;
    private int estimatedPostHeight = 200;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        
        // Check initial authentication state
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            await LoadInitialFeed();
            
            // Detect if we should use virtualization based on device/performance
            useVirtualization = await ShouldUseVirtualization();
        }
    }

    private async Task<bool> ShouldUseVirtualization()
    {
        // Use virtualization for better performance on all devices
        // Can be disabled for debugging or specific scenarios
        return true;
    }

    private async Task LoadInitialFeed()
    {
        try
        {
            searchQuery.Page = 0;
            var result = await FeedService.GetFeedAsync(searchQuery);
            posts = result.Data.ToList();
            canLoadMore = CanLoadMore(result);
            
            // Adjust estimated height based on actual posts
            if (posts.Any())
            {
                estimatedPostHeight = EstimatePostHeight(posts.First());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initial feed: {ex.Message}");
            // Could show an error toast here
        }
    }

    private async Task RefreshFeed()
    {
        try
        {
            searchQuery.Page = 0;
            var result = await FeedService.RefreshFeedAsync(searchQuery);
            posts = result.Data.ToList();
            canLoadMore = CanLoadMore(result);
            StateHasChanged(); // Force refresh after pull-to-refresh
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing feed: {ex.Message}");
        }
    }

    private async Task LoadMorePosts()
    {
        if (isLoadingMore || !canLoadMore) return;

        isLoadingMore = true;
        StateHasChanged();

        try
        {
            var result = await FeedService.LoadMorePostsAsync(searchQuery);
            
            // Add new posts to existing list (matching mobile app behavior)
            posts.AddRange(result.Data);
            canLoadMore = CanLoadMore(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading more posts: {ex.Message}");
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task HandlePostClick(BasePost post)
    {
        // Navigate to post detail page (matching mobile app navigation)
        Navigation.NavigateTo($"/posts/{post.Id}");
    }

    private void GoToCreate()
    {
        Navigation.NavigateTo("/create-post");
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void GoToProfile()
    {
        if (currentUser != null)
        {
            Navigation.NavigateTo($"/profile/{currentUser.UserName}");
        }
    }

    private bool CanLoadMore(SearchResultDto<BasePost> result)
    {
        // Match mobile app's pagination logic
        return result.Data.Count == searchQuery.Count;
    }

    private string GetEmptyMessage()
    {
        return isAuthenticated ? 
            "No posts in your feed yet. Follow some users to see their posts!" :
            "Sign in to see your personalized feed";
    }

    private int EstimatePostHeight(BasePost post)
    {
        // Estimate height based on post content (matching mobile app logic)
        var baseHeight = 120; // Header + actions
        var textLines = (post.Content?.Length ?? 0) / 50; // Rough character per line estimate
        var textHeight = Math.Max(1, textLines) * 20; // Line height
        var mediaHeight = post.PostMedia?.Any() == true ? 200 : 0;
        var replyHeight = post.ReplyType != ReplyType.Non ? 100 : 0;

        return baseHeight + textHeight + mediaHeight + replyHeight;
    }

    private void OnAuthenticationStateChanged(object sender, AuthenticationStateChangedEventArgs e)
    {
        isAuthenticated = e.IsAuthenticated;
        currentUser = e.User;

        if (isAuthenticated && !posts.Any())
        {
            InvokeAsync(LoadInitialFeed);
        }
        else if (!isAuthenticated)
        {
            posts.Clear();
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}