@page "/"
@using BlazorInfiniteScroll
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Components
@using Toxiq.WebApp.Client.Components.Core
@using Toxiq.WebApp.Client.Services.Feed
@using Toxiq.WebApp.Client.Services.Authentication
@inherits ComponentBase
@implements IDisposable
@inject IFeedService FeedService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Toxiq - Home</PageTitle>
<TopNavBar ShowBackButton="false">
    <MiddleContent>
        <div class="logo-container">
            <Logo />
        </div>
    </MiddleContent>
</TopNavBar>

<div class="home-feed-container centered-container">
    @if (isAuthenticated)
    {
        <!-- Infinite Scroll with parent-controlled logic -->
        <div class="feed-content">

            <InfiniteScroll 
            ObserverId="observer1"
            ScrollBoxId="scrollBox1"
            HasAnythingExistToLoadMore="true"
            IsLoadingMore="@isLoadingMore"
            IsInfiniteLoadingNeeded="canLoadMore"
            OnEndReached="LoadMorePosts">
                <Virtualize Items="posts" Context="item">
                    <PostCard Post="item" FullPost="false" />
                </Virtualize>               
                <div id="observer1"></div>
            </InfiniteScroll>              
        </div>

        @if (isLoadingMore)
        {
            <LoadingIndicator />
        }
    }
    else
    {
        <!-- Not authenticated state -->
        <div class="auth-required">
            <div class="auth-content">
                <Logo Width="120" Height="120" Color="rgba(255, 255, 255, 0.3)" />
                <h2>Welcome to Toxiq</h2>
                <p>Where Cool Kids Hangout</p>
                <PrimaryButton OnClick="GoToLogin" ButtonText="Login">

                </PrimaryButton>
            </div>
        </div>
    }
</div>

<style>

    .empty-state, .auth-required {
        text-align: center;
        padding: 60px 20px;
        background-color: var(--gray-950);
        border: 1px solid var(--transparent-white);
        border-radius: 12px;
        margin-top: 40px;
    }

    .auth-content {
        max-width: 400px;
        margin: 0 auto;
    }
</style>

@code {
    // State - parent controls everything
    private List<BasePost> posts = new();
    private bool isAuthenticated = false;
    private UserProfile? currentUser;
    private bool isLoadingMore = false;
    private bool canLoadMore = true;
    private int currentPage = 0;
    private int pageSize = 20;



    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("HomeFeed: Initializing");

        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Check initial authentication state
        isAuthenticated = await AuthService.IsAuthenticatedAsync();

        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            await LoadInitialFeed();
        }
    }

    private async Task LoadInitialFeed()
    {
        Console.WriteLine("HomeFeed: Loading initial feed");

        try
        {
            isLoadingMore = true;
            currentPage = 0;

            var filter = new GetPostDto { Page = currentPage, Count = pageSize };
            var result = await FeedService.GetFeedAsync(filter);

            posts.AddRange(result.Data);
            canLoadMore = result.Data.Count == pageSize; // Can load more if we got full page
            currentPage = 1; // Set current page to 1 since we just loaded the first page
            Console.WriteLine($"HomeFeed: Initial load complete - {posts.Count} posts, canLoadMore={canLoadMore}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HomeFeed: Error loading initial feed: {ex.Message}");
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task LoadMorePosts()
    {
        if (isLoadingMore)
        {
            return;
        }

        if (!canLoadMore)
        {
            return;
        }

        try
        {
            isLoadingMore = true;
            StateHasChanged(); // Show loading state immediately


            var filter = new GetPostDto { Page = currentPage, Count = pageSize };
            var result = await FeedService.LoadMorePostsAsync(filter);


            if (result.Data.Any())
            {

                foreach (var item in result.Data)
                {
                    if (posts.Any(x => x.Id != item.Id))
                        posts.Add(item);
                }
                canLoadMore = result.Data.Count == pageSize; // Can load more if we got full page
            }
            else
            {
                canLoadMore = false; // No more data
            }

            currentPage++;


        }
        catch (Exception ex)
        {
            currentPage--; // Rollback page increment on error
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task RefreshFeed()
    {
        Console.WriteLine("HomeFeed: Refreshing feed");

        try
        {
            posts.Clear();
            currentPage = 0;
            canLoadMore = true;
            await LoadInitialFeed();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HomeFeed: Error refreshing feed: {ex.Message}");
        }
    }


    private void GoToCreate()
    {
        Navigation.NavigateTo("/create-post");
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void OnAuthenticationStateChanged(object sender, AuthenticationStateChangedEventArgs e)
    {
        Console.WriteLine($"HomeFeed: Auth state changed - authenticated: {e.IsAuthenticated}");

        isAuthenticated = e.IsAuthenticated;
        currentUser = e.User;

        if (isAuthenticated && !posts.Any())
        {
            InvokeAsync(LoadInitialFeed);
        }
        else if (!isAuthenticated)
        {
            posts.Clear();
            canLoadMore = true;
            currentPage = 0;
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
