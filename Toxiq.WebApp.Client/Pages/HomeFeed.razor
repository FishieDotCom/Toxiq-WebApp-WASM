@page "/"
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Components
@using Toxiq.WebApp.Client.Components.Core
@using Toxiq.WebApp.Client.Services.Feed
@using Toxiq.WebApp.Client.Services.Authentication
@inherits ComponentBase
@implements IDisposable
@inject IFeedService FeedService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Toxiq - Home</PageTitle>
<TopNavBar ShowBackButton="false">
    <MiddleContent>
        <div class="logo-container">
            <Logo />
        </div>
    </MiddleContent>
</TopNavBar>

<div class="home-feed-container centered-container">
    @if (isAuthenticated)
    {
        <!-- Feed Content with Debug CollectionView -->
        <div class="feed-content">
            <InfiniteScrollView TItem="BasePost"
                                ItemsProvider="@LoadPosts"
                                ItemTemplate="@PostItemTemplate"
                                EmptyMessage="No posts in your feed yet. Follow some users to see their posts!"
                                CssClass="feed-list" />
        </div>
        <!-- Floating Action Button -->
        <button class="floating-action-button" @onclick="GoToCreate">
            ➕
        </button>
    }
    else
    {
        <!-- Not authenticated state -->
        <div class="not-authenticated">
            <div class="welcome-content">
                <ToxiqLogo Height="64" />
                <h1 class="welcome-title">Welcome to Toxiq</h1>
                <p class="welcome-subtitle">Connect with your community</p>
                <PrimaryButton ButtonText="Sign In" OnClick="@GoToLogin" />
            </div>
        </div>
    }
</div>

@code {
    // State management
    private List<BasePost> posts = new();
    private GetPostDto searchQuery = new() { Page = 0, Count = 20 };
    private bool isLoadingMore = false;
    private bool canLoadMore = true;
    private bool isAuthenticated = false;
    private UserProfile? currentUser;

    // Debug tracking
    private string lastLoadTime = "Never";
    private int loadMoreCallCount = 0;

    // Template for rendering each post
    private RenderFragment<BasePost> PostItemTemplate = (post) => __builder =>
    {
        <PostCard Post="@post" FullPost="false" />
    };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("HomeFeed: OnInitializedAsync started");

        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Check initial authentication state
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        Console.WriteLine($"HomeFeed: Initial auth state = {isAuthenticated}");

        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            Console.WriteLine($"HomeFeed: Current user = {currentUser?.UserName}");
            await LoadInitialFeed();
        }
    }

    private async Task LoadInitialFeed()
    {
        Console.WriteLine("HomeFeed: LoadInitialFeed started");

        try
        {
            searchQuery.Page = 0;
            Console.WriteLine($"HomeFeed: Calling FeedService.GetFeedAsync with page={searchQuery.Page}, count={searchQuery.Count}");

            var result = await FeedService.GetFeedAsync(searchQuery);

            Console.WriteLine($"HomeFeed: GetFeedAsync returned {result.Data.Count} posts");

            posts = result.Data.ToList();
            canLoadMore = CanLoadMore(result);
            lastLoadTime = DateTime.Now.ToString("HH:mm:ss");

            Console.WriteLine($"HomeFeed: Initial feed loaded - {posts.Count} posts, canLoadMore={canLoadMore}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HomeFeed: Error loading initial feed: {ex.Message}");
            Console.WriteLine($"HomeFeed: Stack trace: {ex.StackTrace}");
        }
    }

    private async Task RefreshFeed()
    {
        Console.WriteLine("HomeFeed: RefreshFeed started");

        try
        {
            searchQuery.Page = 0;
            Console.WriteLine($"HomeFeed: Refreshing with page={searchQuery.Page}");

            var result = await FeedService.RefreshFeedAsync(searchQuery);

            Console.WriteLine($"HomeFeed: Refresh returned {result.Data.Count} posts");

            posts = result.Data.ToList();
            canLoadMore = CanLoadMore(result);
            lastLoadTime = DateTime.Now.ToString("HH:mm:ss");

            Console.WriteLine($"HomeFeed: Refresh complete - {posts.Count} posts, canLoadMore={canLoadMore}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HomeFeed: Error refreshing feed: {ex.Message}");
        }
    }

    private async ValueTask<IEnumerable<BasePost>> LoadPosts(InfiniteScrollRequest request)
    {
        try
        {
            // Calculate page number from skip/take
            var page = request.Skip / request.Take;

            var filter = new GetPostDto
                {
                    Page = page,
                    Count = request.Take
                };

            Console.WriteLine($"Loading posts: page={page}, take={request.Take}, skip={request.Skip}");

            SearchResultDto<BasePost> result;

            if (page == 0)
            {
                // First page - use GetFeed or RefreshFeed
                result = await FeedService.GetFeedAsync(filter);
            }
            else
            {
                // Subsequent pages - use LoadMore
                result = await FeedService.LoadMorePostsAsync(filter);
            }

            Console.WriteLine($"Loaded {result.Data.Count} posts");

            return result.Data;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading posts: {ex.Message}");
            return Array.Empty<BasePost>();
        }
    }

    private void GoToCreate()
    {
        Navigation.NavigateTo("/create-post");
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private bool CanLoadMore(SearchResultDto<BasePost> result)
    {
        var canLoad = result.Data.Count == searchQuery.Count;
        Console.WriteLine($"HomeFeed: CanLoadMore check - got {result.Data.Count}, requested {searchQuery.Count}, result: {canLoad}");
        return canLoad;
    }

    private string GetEmptyMessage()
    {
        return isAuthenticated ?
            "No posts in your feed yet. Follow some users to see their posts!" :
            "Sign in to see your personalized feed";
    }

    private void OnAuthenticationStateChanged(object sender, AuthenticationStateChangedEventArgs e)
    {
        Console.WriteLine($"HomeFeed: Auth state changed - authenticated: {e.IsAuthenticated}");

        isAuthenticated = e.IsAuthenticated;
        currentUser = e.User;

        if (isAuthenticated && !posts.Any())
        {
            InvokeAsync(LoadInitialFeed);
        }
        else if (!isAuthenticated)
        {
            posts.Clear();
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}