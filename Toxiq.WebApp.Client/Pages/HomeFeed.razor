@* Toxiq.WebApp.Client/Pages/HomeFeed.razor *@
@page "/"
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Services.Authentication
@using Toxiq.WebApp.Client.Services.Feed
@using Toxiq.WebApp.Client.Components
@using Toxiq.WebApp.Client.Services.JavaScript
@inject IAuthenticationService AuthService
@inject IFeedService FeedService
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ITelegramAuthJsInvoker TelegramAuth


<PageTitle>Ashi</PageTitle>
<TopNavBar ShowBackButton="false">
    <MiddleContent>
        <div class="logo-container">
            <Logo/>
        </div>
    </MiddleContent>
</TopNavBar>
<div class="feed-container centered-container">
    @if (isAuthenticated)
    {
        <!-- Feed Header -->
        @* <div class="feed-header">
            <div class="header-brand">
                <Logo Width="32" Height="32" Color="var(--white)" />
                <h1 class="header-title">Ashi</h1>
            </div>

            <div class="header-actions">
                <button class="user-menu" @onclick="GoToProfile">
                    @(currentUser?.Name ?? "User")
                </button>
            </div>
        </div> *@

        <!-- Feed Content -->
        <div>
            @if (isRefreshing)
            {
                <div class="refresh-indicator">
                    <div class="loading-spinner"></div>
                    <span>Refreshing feed...</span>
                </div>
            }

            @if (posts.Any())
            {
                <div class="posts-container" @ref="postsContainer">
                    @foreach (var post in posts)
                    {
                        <PostCard Post="post" OnPostClick="HandlePostClick" />
                    }

                    @if (canLoadMore)
                    {
                        <div class="load-more-container">
                            <button class="btn btn-secondary load-more-btn"
                            @onclick="LoadMorePosts"
                            disabled="@isLoadingMore">
                                @if (isLoadingMore)
                                {
                                    <div class="loading-spinner small"></div>
                                    <span>Loading...</span>
                                }
                                else
                                {
                                    <span>Load More Posts</span>
                                }
                            </button>
                        </div>
                    }
                    else if (posts.Any())
                    {
                        <div class="end-of-feed">
                            <span>You've reached the end!</span>
                        </div>
                    }
                </div>

                <!-- Floating refresh button -->
                <div class="floating-refresh">
                    <button class="refresh-btn" @onclick="RefreshFeed" disabled="@isRefreshing">
                        <span class="refresh-icon @(isRefreshing ? "spinning" : "")">↻</span>
                    </button>
                </div>
            }
            else if (isLoading)
            {
                <!-- Loading skeleton -->
                <div class="feed-skeleton">
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="skeleton-post">
                            <div class="skeleton-header">
                                <div class="skeleton-avatar"></div>
                                <div class="skeleton-name"></div>
                            </div>
                            <div class="skeleton-content"></div>
                            <div class="skeleton-content short"></div>
                            <div class="skeleton-actions"></div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- Empty state -->
                <div class="empty-state">
                    <div class="empty-icon">
                        <Logo Width="80" Height="80" Color="rgba(255, 255, 255, 0.3)" />
                    </div>
                    <h2 class="empty-title">No posts yet</h2>
                    <p class="empty-text">Be the first to share something!</p>
                    <button class="btn btn-primary" @onclick="RefreshFeed">
                        Refresh Feed
                    </button>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Not authenticated - redirect to login -->
        <div class="auth-required">
            <div class="auth-content">
                <Logo Width="120" Height="120" Color="rgba(255, 255, 255, 0.3)" />
                <h2>Welcome to Toxiq</h2>
                <p>Where Cool Kids Hangout</p>
                <PrimaryButton OnClick="GoToLogin" ButtonText="Login">

                </PrimaryButton>
            </div>
        </div>
    }
</div>

<style>
    .feed-container {
    min-height: 100vh;
    background-color: var(--black);
    color: var(--white);
    }

    .refresh-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 20px;
    color: var(--gray-300);
    font-size: 14px;
    }

    .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid var(--gray-600);
    border-top: 2px solid var(--white);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    }

    @@keyframes spin {
    0%

    {
    transform: rotate(0deg);
    }

    100% {
    transform: rotate(360deg);
    }

    }

    .posts-container {
    padding-bottom: 20px;
    }

    .load-more-container {
    display: flex;
    justify-content: center;
    padding: 20px;
    margin-top: 16px;
    }

    .load-more-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 24px;
    min-width: 140px;
    justify-content: center;
    }

    .loading-spinner.small {
    width: 16px;
    height: 16px;
    border-width: 2px;
    }

    .floating-refresh {
    position: fixed;
    bottom: 30px;
    right: 30px;
    z-index: 50;
    }

    .refresh-btn {
    width: 56px;
    height: 56px;
    border-radius: 50%;
    background-color: var(--magenta);
    border: none;
    color: var(--white);
    font-size: 24px;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    transition: all 0.2s ease;
    }

    .refresh-btn:hover:not(:disabled) {
    background-color: #e91e63;
    transform: scale(1.05);
    }

    .refresh-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    }

    .refresh-icon.spinning {
    animation: spin 1s linear infinite;
    }

    .end-of-feed {
    text-align: center;
    padding: 30px 20px;
    color: var(--gray-400);
    font-size: 14px;
    }

    /* Loading skeleton styles */
    .feed-skeleton {
    display: flex;
    flex-direction: column;
    gap: 16px;
    }

    .skeleton-post {
    background-color: var(--gray-950);
    border: 1px solid var(--transparent-white);
    border-radius: 12px;
    padding: 16px;
    animation: pulse 1.5s ease-in-out infinite alternate;
    }

    .skeleton-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
    }

    .skeleton-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--gray-600);
    }

    .skeleton-name {
    width: 120px;
    height: 16px;
    border-radius: 4px;
    background-color: var(--gray-600);
    }

    .skeleton-content {
    width: 100%;
    height: 16px;
    border-radius: 4px;
    background-color: var(--gray-600);
    margin-bottom: 8px;
    }

    .skeleton-content.short {
    width: 60%;
    }

    .skeleton-actions {
    width: 100%;
    height: 40px;
    border-radius: 8px;
    background-color: var(--gray-600);
    margin-top: 12px;
    }

    @@keyframes pulse {
    0%

    {
    opacity: 0.6;
    }

    100% {
    opacity: 1;
    }

    }

    /* Empty state */
    .empty-state, .auth-required {
    text-align: center;
    padding: 60px 20px;
    background-color: var(--gray-950);
    border: 1px solid var(--transparent-white);
    border-radius: 12px;
    margin-top: 40px;
    }

    .auth-content {
    max-width: 400px;
    margin: 0 auto;
    }

    .empty-icon {
    margin-bottom: 20px;
    }

    .empty-title, .auth-required h2 {
    color: var(--white);
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 12px;
    }

    .empty-text, .auth-required p {
    color: var(--gray-300);
    font-size: 16px;
    margin-bottom: 24px;
    }

    /* Responsive */
    @@media (max-width: 768px) {
    .feed-header

    {
    padding: 12px 16px;
    }

    .header-title {
    font-size: 20px;
    }

    .feed-main {
    padding: 16px;
    }

    .floating-refresh {
    bottom: 20px;
    right: 20px;
    }

    .refresh-btn {
    width: 48px;
    height: 48px;
    font-size: 20px;
    }

    }
</style>

@code {
    private bool isAuthenticated = false;
    private UserProfile currentUser;
    private List<BasePost> posts = new();
    private bool isLoading = true;
    private bool isRefreshing = false;
    private bool isLoadingMore = false;
    private bool canLoadMore = true;
    private ElementReference postsContainer;

    private GetPostDto searchQuery = new()
        {
            Audience = Audience.All,
            Count = 20,
            Page = 0,
            Sort = SortType.New
        };

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Check initial authentication state
        await CheckAuthenticationState();
        await TelegramAuth.HideBackButtonAsync();
        if (isAuthenticated)
        {
            await LoadInitialFeed();
        }
    }

    private async Task CheckAuthenticationState()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
        }
        StateHasChanged();
    }

    private async Task LoadInitialFeed()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await FeedService.GetFeedAsync(searchQuery);
            posts = result.Data.ToList();
            searchQuery.Page++;
            canLoadMore = CanLoadMore(result);
        }
        catch (Exception ex)
        {
            // Handle error - maybe show toast notification
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool CanLoadMore(SearchResultDto<BasePost> result)
    {
        if (result.TotalPage > searchQuery.Page && result.TotalCount != 0)
            return true;
        else
            return  false;
    }

    private async Task RefreshFeed()
    {
        if (isRefreshing) return;

        isRefreshing = true;
        //showFloatingRefresh = false;
        StateHasChanged();

        try
        {
            searchQuery.Page = 0;
            var result = await FeedService.RefreshFeedAsync(searchQuery);
            posts = result.Data.ToList();
            canLoadMore = CanLoadMore(result);
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task LoadMorePosts()
    {
        if (isLoadingMore || !canLoadMore) return;

        isLoadingMore = true;
        StateHasChanged();

        try
        {
            var result = await FeedService.LoadMorePostsAsync(searchQuery);
            posts.AddRange(result.Data);
            canLoadMore = CanLoadMore(result);
        }
        catch (Exception ex)
        {
            // Handle error - could show a toast notification
            Console.WriteLine($"Error loading more posts: {ex.Message}");
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task HandlePostClick(BasePost post)
    {
        Navigation.NavigateTo($"/posts/{post.Id}");
    }

    private void OnAuthenticationStateChanged(object sender, AuthenticationStateChangedEventArgs e)
    {
        isAuthenticated = e.IsAuthenticated;
        currentUser = e.User;

        if (isAuthenticated && !posts.Any())
        {
            InvokeAsync(LoadInitialFeed);
        }

        InvokeAsync(StateHasChanged);
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void GoToProfile()
    {
        Navigation.NavigateTo($"/profile/{currentUser?.UserName}");
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}