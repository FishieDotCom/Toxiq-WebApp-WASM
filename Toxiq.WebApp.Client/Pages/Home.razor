@* Toxiq.WebApp.Client/Pages/Index.razor *@
@page "/"
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Services.Authentication
@using Toxiq.WebApp.Client.Components
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Toxiq</PageTitle>

<div class="feed-container">
    @if (isAuthenticated)
    {
        <div class="feed-main">
            <div class="content-placeholder">
                <div class="placeholder-icon">
                    <Logo Width="80" Height="80" Color="rgba(255, 255, 255, 0.3)" />
                </div>
                <h2 class="placeholder-title">Welcome @(currentUser?.Name ?? "back")!</h2>
                <p class="placeholder-text">Your feed will appear here once posts are loaded.</p>
            </div>
        </div>
    }
    else
    {
        <div class="feed-main">
            <div class="content-placeholder">
                <div class="placeholder-icon">
                    <Logo Width="120" Height="120" Color="rgba(255, 255, 255, 0.3)" />
                </div>
                <h2 class="placeholder-title">Welcome to Toxiq</h2>
                <p class="placeholder-text">Where Cool Kids Hangout</p>
                <button class="btn btn-primary" @onclick="GoToLogin">
                    Get Started
                </button>
            </div>
        </div>
    }
</div>

@code {
    private bool isAuthenticated = false;
    private UserProfile currentUser;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Check initial authentication state
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
        }
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(object sender, AuthenticationStateChangedEventArgs e)
    {
        isAuthenticated = e.IsAuthenticated;
        currentUser = e.User;
        InvokeAsync(StateHasChanged);
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}