@page "/signalr-debug"
@using Toxiq.Mobile.Dto
@using Toxiq.WebApp.Client.Services.Notifications
@using Toxiq.WebApp.Client.Services.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@inject ISignalRService SignalRService
@inject IAuthenticationService AuthService
@implements IAsyncDisposable

<h3>SignalR Connection Debug</h3>

<div style="font-family: monospace; background: #1a1a1a; color: #fff; padding: 20px; border-radius: 8px;">

    <div style="margin-bottom: 20px;">
        <strong>Connection Status:</strong>
        <span style="color: @(isConnected ? "#4CAF50" : "#f44336");">
            @(isConnected ? "Connected" : "Disconnected")
        </span>
    </div>

    <div style="margin-bottom: 20px;">
        <strong>Authentication Status:</strong>
        <span style="color: @(isAuthenticated ? "#4CAF50" : "#f44336");">
            @(isAuthenticated ? "Authenticated" : "Not Authenticated")
        </span>
    </div>

    <div style="margin-bottom: 20px;">
        <strong>Token Available:</strong>
        <span style="color: @(hasToken ? "#4CAF50" : "#f44336");">
            @(hasToken ? "Yes" : "No")
        </span>
        @if (hasToken && !string.IsNullOrEmpty(tokenPreview))
        {
            <div style="font-size: 12px; color: #ccc; margin-top: 5px;">
                Token: @tokenPreview...
            </div>
        }
    </div>

    <div style="margin-bottom: 20px;">
        <button @onclick="TestConnection" disabled="@isTestRunning"
                style="padding: 10px 20px; margin-right: 10px; background: #2196F3; color: white; border: none; border-radius: 4px;">
            @(isTestRunning ? "Testing..." : "Test Connection")
        </button>

        <button @onclick="StartConnection" disabled="@(isConnected || isTestRunning)"
                style="padding: 10px 20px; margin-right: 10px; background: #4CAF50; color: white; border: none; border-radius: 4px;">
            Start Connection
        </button>

        <button @onclick="StopConnection" disabled="@(!isConnected || isTestRunning)"
                style="padding: 10px 20px; background: #f44336; color: white; border: none; border-radius: 4px;">
            Stop Connection
        </button>
    </div>

    <div style="margin-bottom: 10px;">
        <strong>Debug Log:</strong>
        <button @onclick="ClearLog" style="float: right; padding: 5px 10px; background: #666; color: white; border: none; border-radius: 4px;">
            Clear
        </button>
    </div>

    <div style="background: #000; padding: 15px; border-radius: 4px; max-height: 400px; overflow-y: auto;">
        @foreach (var log in debugLogs)
        {
            <div style="margin-bottom: 5px; color: @GetLogColor(log.Level);">
                <span style="color: #888;">[@log.Timestamp.ToString("HH:mm:ss")]</span>
                <span style="color: @GetLogColor(log.Level);">[@log.Level]</span>
                @log.Message
            </div>
        }
    </div>

</div>

@code {
    private bool isConnected = false;
    private bool isAuthenticated = false;
    private bool hasToken = false;
    private string tokenPreview = "";
    private bool isTestRunning = false;
    private List<DebugLog> debugLogs = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to events
        SignalRService.ConnectionStateChanged += OnConnectionStateChanged;
        SignalRService.NotificationReceived += OnSignalRNotificationReceived;

        await CheckAuthStatus();
        await CheckConnectionStatus();
    }

    private async Task CheckAuthStatus()
    {
        try
        {
            isAuthenticated = AuthService.IsAuthenticated().GetValueOrDefault(false);
            var token = await AuthService.GetTokenAsync();
            hasToken = !string.IsNullOrEmpty(token);
            tokenPreview = hasToken ? token[..Math.Min(20, token.Length)] : "";

            AddLog("INFO", $"Auth check: Authenticated={isAuthenticated}, HasToken={hasToken}");
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"Auth check failed: {ex.Message}");
        }
    }

    private async Task CheckConnectionStatus()
    {
        isConnected = SignalRService.IsConnected;
        AddLog("INFO", $"Connection status: {(isConnected ? "Connected" : "Disconnected")}");
    }

    private async Task TestConnection()
    {
        isTestRunning = true;
        AddLog("INFO", "Starting connection test...");

        try
        {
            // Test 1: Check authentication
            await CheckAuthStatus();

            if (!isAuthenticated || !hasToken)
            {
                AddLog("ERROR", "Cannot test connection - not authenticated or no token");
                return;
            }

            // Test 2: Build hub URL
            var apiBaseUrl = "https://toxiq.xyz/api/"; // Hardcoded for testing
            var baseUrl = apiBaseUrl.Replace("/api/", "").TrimEnd('/');
            var hubUrl = $"{baseUrl}/hubs/notification";
            AddLog("INFO", $"Hub URL: {hubUrl}");

            // Test 3: Try to create connection manually
            var token = await AuthService.GetTokenAsync();
            var connection = new HubConnectionBuilder()
                .WithUrl(hubUrl, options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                    options.Headers.Add("Authorization", $"Bearer {token}");
                })
                .ConfigureLogging(logging =>
                {
                    logging.SetMinimumLevel(LogLevel.Debug);
                })
                .Build();

            AddLog("INFO", "Test connection created, attempting to start...");

            await connection.StartAsync();
            AddLog("SUCCESS", $"Test connection successful! Connection ID: {connection.ConnectionId}");

            await connection.StopAsync();
            await connection.DisposeAsync();
            AddLog("INFO", "Test connection disposed");
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"Connection test failed: {ex.Message}");
            if (ex.InnerException != null)
            {
                AddLog("ERROR", $"Inner exception: {ex.InnerException.Message}");
            }
        }
        finally
        {
            isTestRunning = false;
            StateHasChanged();
        }
    }

    private async Task StartConnection()
    {
        try
        {
            AddLog("INFO", "Starting SignalR service...");
            await SignalRService.StartAsync(AuthService.GetTokenAsync().Result);
            await CheckConnectionStatus();
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"Failed to start connection: {ex.Message}");
        }
    }

    private async Task StopConnection()
    {
        try
        {
            AddLog("INFO", "Stopping SignalR service...");
            await SignalRService.StopAsync();
            await CheckConnectionStatus();
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"Failed to stop connection: {ex.Message}");
        }
    }

    private void OnConnectionStateChanged(object? sender, bool connected)
    {
        InvokeAsync(() =>
        {
            isConnected = connected;
            AddLog("INFO", $"Connection state changed: {(connected ? "Connected" : "Disconnected")}");
            StateHasChanged();
        });
    }
    private void OnSignalRNotificationReceived(object? sender, NotificationDto data)
    {
        InvokeAsync(() =>
        {
            AddLog("INFO", $"notification");
            StateHasChanged();
        });
    }

    private void AddLog(string level, string message)
    {
        debugLogs.Add(new DebugLog
            {
                Timestamp = DateTime.Now,
                Level = level,
                Message = message
            });

        // Keep only last 50 logs
        if (debugLogs.Count > 50)
        {
            debugLogs.RemoveAt(0);
        }

        InvokeAsync(StateHasChanged);
    }

    private void ClearLog()
    {
        debugLogs.Clear();
        StateHasChanged();
    }

    private string GetLogColor(string level) => level switch
    {
        "ERROR" => "#f44336",
        "SUCCESS" => "#4CAF50",
        "INFO" => "#2196F3",
        _ => "#fff"
    };

    public async ValueTask DisposeAsync()
    {
        SignalRService.ConnectionStateChanged -= OnConnectionStateChanged;
    }

    private class DebugLog
    {
        public DateTime Timestamp { get; set; }
        public string Level { get; set; } = "";
        public string Message { get; set; } = "";
    }
}